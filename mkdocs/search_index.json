{
    "docs": [
        {
            "location": "/",
            "text": "Avalon\n\n\nPick your poison.\n\n\n\n\nv1.0\n\n\nv2.0",
            "title": "Home"
        },
        {
            "location": "/#avalon",
            "text": "Pick your poison.   v1.0  v2.0",
            "title": "Avalon"
        },
        {
            "location": "/1.0/",
            "text": "Mindbender\n\n\n\n    \n\n    \nThe safe post-production pipeline\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeywords:\n Film, games, content creation, pipeline\n\n\n\n\n\n\nObjective:\n\n\n\n\nProvide a unified framework within which artists at Mindbender may work efficiently.\n\n\nEnable extending of said framework for future improvements and unique requirements.\n\n\nInspire further expansion upon a series of basic ideas.\n\n\n\n\n\n\n\n\nRequirements:\n Core functionality must be editable and extensible by the technical director.\n\n\n\n\n\n\nTechnology:\n Mindbender is built upon \nPyblish\n, \nPython\n and \nbindings\n for \nQt\n, and depends upon a Windows, Linux or MacOS operating system with \nAutodesk Maya\n, \nThe Foundry Nuke\n, \nSideFX Houdini\n and other DCC content creation applications.\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\nTo make the most out of this document, some knowledge and experience is assumed.\n\n\n\n\n\n\n\n\n\n\nminimal\n\n\nrecommended\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\ntechnical director\n\n\npipeline technical director\n\n\n\n\n\n\nexperience\n\n\n1 year in advertisements or games\n\n\n5+ years in feature film\n\n\n\n\n\n\nsoftware\n\n\nwindows, linux or macos\n\n\nmaya\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\nWelcome to mindbender-core, the production pipeline at \nMindbender Animation Studio\n.\n\n\n\n\nTable of contents\n\n\n\n\nFeatures\n\n\nInstall\n\n\nUpdate\n\n\nUsage\n\n\nDescription\n\n\nBatteries\n\n\nCreator\n\n\nLoader\n\n\nManager\n\n\n\n\n\n\nAPI\n\n\nTerminology\n\n\nFilesystem API\n\n\nInformation Hierarchy\n\n\nPrivate, Public and Stage\n\n\nls\n()\n\n\nasset\n.\njson\n\n\nversion\n.\njson\n\n\nsubset\n.\njson\n\n\nrepresentation\n.\njson\n\n\ncontainer\n.\njson\n\n\n\n\n\n\nMindbender API\n\n\nHost API\n\n\n\n\n\n\nContract\n\n\nmindbender\n.\nmodel\n\n\nmindbender\n.\nrig\n\n\nmindbender\n.\nanimation\n\n\nmindbender\n.\nlookdev\n\n\n\n\n\n\nHomework\n\n\nContributing\n\n\nHelp\n\n\n\n\n\n\n\n\nFeatures\n\n\nThis project currently boasts the following features.\n\n\n\n\n\n\n\n\n\n\nFeature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source\n\n\nAnyone can take part in testing, using and developing the pipeline on \nGitHub\n.\n\n\n\n\n\n\n\n\nVersion Control\n\n\nEntire pipeline is \nreviewed\n and \ntested\n prior to any change being made.\n\n\n\n\n\n\n\n\nIssue Tracker\n\n\nFeature requests, bugs and questions are reported, assigned and solved openly.\n\n\n\n\n\n\n\n\nSingle-command install and update via Git\n\n\nZero dependencies make for easy install and updates.\n\n\n\n\n\n\n\n\nEnvironment management\n\n\nThe developer manages the environment without distrupting the end user\n\n\n\n\n\n\n\n\nDirectory management\n\n\nFolders are automatically created as per the developers setup.\n\n\n\n\n\n\n\n\nApplication launcher\n\n\nControl over which version of which software is launched along with its initial configuration.\n\n\n\n\n\n\n\n\nAsset versioning\n\n\nEvery asset, including shots, are explicitly versioned - e.g. v001, v034\n\n\n\n\n\n\n\n\nAsset subsets\n\n\nEach asset, such as \nTarzan\n, contains one or more subsets, such as \nmodel\n, \nrig\n and \nlook\n.\n\n\n\n\n\n\n\n\nAsset and shot uniformity\n\n\nShots are assets too.\n\n\n\n\n\n\n\n\nPer project/shot settings\n\n\nGlobally configure the framerate of a given project.\n\n\n\n\n\n\n\n\nPer family publishing of assets\n\n\nIndividually manage the validation and export assets of specific types, such as \nmodel\n, \nrig\n and \nanimation\n.\n\n\n\n\n\n\n\n\nPer family loading of assets\n\n\nIndividually manage loading of the same specific types of assets.\n\n\n\n\n\n\n\n\nAsset Metadata\n\n\nRelevant information is stored alongside each published version\n\n\n\n\n\n\n\n\nTools\n\n\nGraphical user interfaces for Creating, Publishing, Loading and Managing assets\n\n\n\n\n\n\n\n\nMenus\n\n\nApplication menus for modeling, rigging and animation\n\n\n\n\n\n\n\n\nSupport for off-site freelancers/studios\n\n\nNo dependence on the local environment, the pipeline can be installed anywhere.\n\n\n\n\n\n\n\n\nSupport for Qt 4 and Qt 5 bindings\n\n\nTransparently uses the most desirable binding of Qt wherever the pipeline is used.\n\n\n\n\n\n\n\n\n\n\n\n\nInstall\n\n\nMindbender takes the form of a \"git\" repository. Therefore, you will need to install \nGit\n. Once installed, open up a terminal (Start > \"cmd\" > Enter) and type this in.\n\n\n$ git clone https://github.com/mindbender-studio/setup mindbender-setup --recursive\n$ \ncd\n mindbender-setup\n$ git checkout \n1\n.0 -b \n1\n.0\n$ git submodule update\n$ start .\n\n\n\n\nWindows Explorer appears! Double-click \nmb\n.\nbat\n and off you go!\n\n\n\n\n\n\nCongratulations!\n\n\nYou are now fully equipped to handle Mindbender tasks!\n\n\nNext Step\n\n\n\n\nUpdate\n\n\nCustomisation\n\n\nWorkflow\n\n\n\n\n\n\n\n\nUpdate\n\n\nTo update mindbender-setup, run the \nupdate\n.\nbat\n file supplied within the \nmindbender\n-\nsetup\n directory.\n\n\nAlternatively, you may type this.\n\n\n$ \ncd\n mindbender-setup\n$ git pull\n$ git submodule update --recursive\n\n\n\n\nIt is safe to run these as many times as you'd like.\n\n\n\n\n\n\nCustomisation\n\n\nThe above is all that is required to get started with the Mindbender Pipeline. If you are at home and are just looking to try things out, feel free to play around. Create a few assets, publish them and familiarise yourself with the \nworkflow\n.\n\n\nIf you are at a studio, you will likely want to use your own projects with the Mindbender Launcher.\n\n\nThe next step is telling \nmb\n.\nbat\n about your local projects. From your terminal, type this.\n\n\n$ \ncd\n mindbender-setup\n$ notepad mb.bat\n\n\n\n\nNotepad appears.\n\n\nAt the bottom of this file, replace \n%REPLACE_ME%\n with the absolute path to where your projects are located, such as \nm\n:\n\\\nf03_projects\n. Now type \nmb\n.\nbat\n again to access your own projects. Optionally, you may also create a shortcut of \nmb\n.\nbat\n to your Desktop, Start Menu or any location you prefer.\n\n\n\n\n\n\nUsage\n\n\nMindbender is initialised by calling \ninstall\n()\n with an interface for your host.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n,\n \nmaya\n\n\napi\n.\ninstall\n(\nmaya\n)\n\n\n\n\n\nSupported hosts\n\n\n\n\nmaya\n\n\nnuke\n\n\nhoudini\n\n\n\n\nFrom here, you model, rig and animate as per the \ncontract\n below.\n\n\n\n\n\n\nHow to read this guide\n\n\nHere are a few of the conventions used throughout this guide.\n\n\n\n\nbold\n words are used to augment important aspects of a sentence\n\n\nUPPERCASE words are unique terminology, each detailed under \nTerminology\n below.\n\n\n(1), (2) are used to division important aspects in a sentence.\n\n\ncode\n is used to highlight words that occur in code.\n\n\n\n\n\n\n\n\nDescription\n\n\nMindbender is a content creation studio focusing on photo-realistic, yet exaggerated cartoons. They work across continents in Sweden, Brazil and Spain and therefore require an underlying pipeline that facilitate these activities.\n\n\nPyblish Mindbender works exclusively with computer generated imagery - which means no focus is put on video, sound or the integration of 3d and live action footage. It has been designed for use both locally and remotely, to bridge the gap between artists working together but in different locations.\n\n\nOverview\n\n\nThis pipeline covers the entire pipeline at Mindbender, including asset and shot creation. A PROJECT is partitioned into SHOTs where each shot consists of one or more ASSETs.\n\n\nThis pipeline includes tools and Pyblish plug-ins for 4 common types of ASSETs in a typical production pipeline.\n\n\n\n\nModeling\n\n\nRigging\n\n\nAnimation\n\n\nLook\n\n\n\n\nThese implement \n(1)\n a contract for each FAMILY of ASSETs and \n(2)\n their interface towards each other.\n\n\n\n\n\n\nBatteries\n\n\nMindbender hosts a series of \ngraphical user interfaces\n that aid the user in conforming to the specified \ncontracts\n.\n\n\n\n\n\n\n\n\nName\n\n\nPurpose\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreator\n\n\ncontrol what goes out\n\n\nManage how data is outputted from an application.\n\n\n\n\n\n\nloader\n\n\ncontrol what goes in\n\n\nKeep tabs on where data comes from so as to enable tracking and builds.\n\n\n\n\n\n\nmanager\n\n\nstay up to date\n\n\nNotification and visualisation of loaded data.\n\n\n\n\n\n\n\n\n\n\n\n\nCreator\n\n\nAssociate content with a family.\n\n\nThe family is what determins how the content is handled throughout your pipeline and tells Pyblish what it should look like when valid.\n\n\nAPI\n\n\nThe creator respects families registered with Mindbender.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\n\napi\n.\nregister_family\n(\n\n    \nname\n=\n\"my.family\"\n,\n\n    \nhelp\n=\n\"My custom family\"\n,\n\n\n)\n\n\n\n\n\nFor each family, a \ncommon set of data\n is automatically associated with the resulting instance.\n\n\n{\n\n    \n\"id\"\n:\n \n\"pyblish.mindbender.instance\"\n,\n\n    \n\"family\"\n:\n \n{\nchosen\n \nfamily\n}\n\n    \n\"name\"\n:\n \n{\nchosen\n \nname\n}\n\n\n}\n\n\n\n\n\nAdditional common\n data can be added.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\n\napi\n.\nregister_data\n(\n\n    \nkey\n=\n\"myKey\"\n,\n\n    \nvalue\n=\n\"My value\"\n,\n\n    \nhelp\n=\n\"A special key\"\n\n\n)\n\n\n\n\n\nData may be \nassociated\n with a family.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\n\napi\n.\nregister_family\n(\n\n    \nname\n=\n\"my.family\"\n,\n\n    \ndata\n=\n[\n\n        \n{\n\"key\"\n:\n \n\"name\"\n,\n \n\"value\"\n:\n \n\"marcus\"\n,\n \n\"help\"\n:\n \n\"Your name\"\n},\n\n        \n{\n\"key\"\n:\n \n\"age\"\n,\n \n\"value\"\n:\n \n30\n,\n \n\"help\"\n:\n \n\"Your age\"\n},\n\n\n])\n\n\n\n\n\n\n\n\n\n\n\nLoader\n\n\nVisualise results from \napi\n.\nls\n()\n.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\n\nfor\n \nasset\n \nin\n \napi\n.\nls\n():\n\n    \nprint\n(\nasset\n[\n\"name\"\n])\n\n\n\n\n\nAPI\n\n\nThe results from \napi\n.\nls\n()\n depends on the currently \nregistered root\n.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\napi\n.\nregister_root\n(\n\"/projects/gravity\"\n)\n\n\n\n\n\nThe chosen \nASSET\n is passed to the \nload\n()\n function of the currently registered host.\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n,\n \nmaya\n\n\napi\n.\nregister_host\n(\nmaya\n)\n\n\n\n\n\nA host is automatically registered on \napi\n.\ninstall\n()\n.\n\n\n\n\n\n\n\n\nManager\n\n\nVisualise loaded assets.\n\n\nfrom\n \nmindbender\n \nimport\n \nmaya\n\n\n\nfor\n \ncontainer\n \nin\n \nmaya\n.\nls\n():\n\n    \nprint\n(\ncontainer\n[\n\"name\"\n])\n\n\n\n# The same is true for any host; houdini, nuke etc.\n\n\n\n\n\nAPI\n\n\nThe results from \nls\n()\n depends on the currently registered host, such as Maya.\n\n\nfrom\n \nmindbender\n \nimport\n \nnuke\n\n\napi\n.\nregister_host\n(\nnuke\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI\n\n\nMindbender exposes a series of interrelated APIs to the end-user.\n\n\n\n\n\n\n\n\nName\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nTerminal API\n\n\nDefines how the \nartist\n interacts with \ntasks\n\n\n\n\n\n\nFilesystem API\n\n\nDefines how the \ndeveloper\n interact with \ndata\n on disk\n\n\n\n\n\n\nMindbender API\n\n\nDefines how the \ndeveloper\n interacts with \nMindbender\n\n\n\n\n\n\nHost API\n\n\nDefines how the \nhost\n interacts with \nMindbender\n\n\n\n\n\n\n\n\n\n\n\n\nTerminology\n\n\nMindbender reserves the following words for private and public use. Public members are exposed to the user, private ones are internal to the implementation.\n\n\n\n\n\n\n\n\n\n\nTerm\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nPROJECTS\n\n\nX\n\n\nParent of projects\n\n\nm\n:\n\\\nf03_projects\n\n\n\n\n\n\n\n\nPROJECT\n\n\nX\n\n\nRoot of information\n\n\nGravity, Dr. Strange\n\n\n\n\n\n\n\n\nASSET\n\n\nX\n\n\nUnit of data\n\n\nRyan, Bicycle, Flower pot\n\n\n\n\n\n\n\n\nVERSION\n\n\nX\n\n\nAn ASSET iteration\n\n\nv1, v034\n\n\n\n\n\n\n\n\nREPRESENTATION\n\n\n\n\nA data format\n\n\nMaya file, pointcache, thumbnail\n\n\n\n\n\n\n\n\nFORMAT\n\n\n\n\nA file extension\n\n\n.ma\n, \n.abc\n, \n.ico\n, \n.png\n\n\n\n\n\n\n\n\nFAMILY\n\n\nX\n\n\nA type of ASSET\n\n\nmodel\n, \nrig\n, \nlook\n, \nanimation\n\n\n\n\n\n\n\n\nWORKSPACE\n\n\nX\n\n\nPrivate data\n\n\nScenefile for v034 of Ryan\n\n\n\n\n\n\n\n\nSILO\n\n\n\n\nData repository\n\n\nRyan resides in \nassets\n, caches in \nfilm\n.\n\n\n\n\n\n\n\n\nINSTANCE\n\n\n\n\nInverse of a file\n\n\nmodelDefault_SET\n\n\n\n\n\n\n\n\nSTAGE\n\n\n\n\nTransient data\n\n\nOutgoing VERSION from scenefile\n\n\n\n\n\n\n\n\nSHARED\n\n\nX\n\n\nPublic data\n\n\nv034 of Ryan\n\n\n\n\n\n\n\n\nPRODUCER\n\n\n\n\nCreator of data\n\n\nYou\n\n\n\n\n\n\n\n\nCONSUMER\n\n\n\n\nUser of data\n\n\nMe\n\n\n\n\n\n\n\n\n\n\n\n\nTerminal API\n\n\nmb\n.\nbat\n (pronounced \"embee-bat\") is the Mindbender Launcher. It is how artists launch applications, such as Maya and Nuke. It establishes important environment variables used when producing and publishing data, along with exposing artists to tools relevant a given project.\n\n\n\n\n\n\nproject.bat\n\n\nmb\n.\nbat\n is where artists enter the pipeline. A user may then enter any of the available projects, via a \nproject\n.\nbat\n file.\n\n\nThe project file is located in your PROJECTS directory\n\n\n@echo off\ncall _mkproject %~dp0 %~n0 %1\n\n\n\n\nasset.bat\n\n\n@echo off\ncall _mkproject %~dp0 %~n0 %1\n\n\n\n\nThe layout is as follows.\n\n\n\n\n{\nPROJECT\n}\n (with TAB-completion)\n\n\n{\nASSET\n}\n or Shot (with TAB-COMPLETION)\n\n\n{\nAPPLICATION\n}\n \n{\nTASK\n}\n\n\n\n\nThe given TASK is automatically created, unless it already exists.\n\n\nEnvironment variables\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPROJECT\n\n\nNice name of PROJECT, e.g. Gifts for Greta\n\n\n\n\n\n\nPROJECTDIR\n\n\nAbsolute path to PROJECT, e.g. m:\\f01_projects\\p999_Gifts_for_Greta\n\n\n\n\n\n\nROOT\n\n\nTop level directory of either shot or asset, e.g. ..\\Greta\n\n\n\n\n\n\n\n\n\n\n\n\nFilesystem API\n\n\nData is organised into \nfiles\n and \nfolders\n.\n\n\nSome files and folders have special meaning in Mindbender.\n\n\n\n\n\n\nInformation Hierarchy\n\n\nThe mental and physical model for files and folders look like this.\n\n\n\n\n\n\n\n\nPrivate, Public and Stage\n\n\nDuring the course of the creation of any ASSET, data moves between 2 of 3 states.\n\n\n\n\n\n\nThe pipeline does not take into consideration the workspace and is therefore \nworkspace-agnostic\n. \n\n\nThe \nstaging area\n is both implicit and transparent to the PRODUCER and CONSUMER, except for debugging purposes. This is where automatic/scheduled garbage collection may run to optimise for space constraints.\n\n\nThe \nshared space\n is where ASSETs ultimately reside once published.\n\n\n\n\n\n\nPrivate and Public separation\n\n\nA naive approach to content creation might be to refer to ASSETs straight from another artists workspace. At Mindbender, data is separated between work-in-progress (private) and data exposed to others (public).\n\n\nPrivate data resides in \nwork\n, public data resides in \npublish\n.\n\n\n\n\nPrivate data is highly \nmutable\n and typically \nprivate\n to an individual artist.\n\n\n\n\nMutable\n implies transient data that is likely to change at any given moment.\n\n\nPrivate\n implies personal, highly irregular and likely invalid data.\n\n\n\n\nPublic data on the other hand is \nimmutable\n, \ncorrect\n and \nimpersonal\n.\n\n\n\n\nImmutable\n implies that the data may be dependent upon by other data.\n\n\nCorrect\n implies passing validation of the associated family.\n\n\nImpersonal\n implies following strict organisational conventions.\n\n\n\n\n\n\n\n\nEach \nASSET\n reside within a top-level ROOT and SILO directory as follows.\n\n\n\n\n\n\n\n\nHierarchy\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach ASSET contains a \nwork\n and \npublish\n directory. \nwork\n is where artists save their own files while working, whereas \npublish\n is where published files go.\n\n\nThe \npublish\n directory contains 0 or more \nSUBSETS\n which in turn contains 0 or more \nVERSIONS\n\n\n\n\n\n\n\n\nHierarchy\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach VERSION contains 1 or more \nREPRESENTATIONS\n.\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll data is written in 3 stages.\n\n\n\n\nTo a local \n/\ntemp\n directory.\n\n\nTo a \"staging\" directory\n\n\nTo the final destination.\n\n\n\n\nData is first written locally, so as to not burden a potentially remote filesystem with sporadic writes performed by an application - for example, caching may be bound by parsing of geometry, and not I/O bound. Which means many small writing requests are scattered when exporting a large file.\n\n\nIt also alleviates the remote system from times where writing is cancelled or otherwise fails.\n\n\nThe staging area is where files are written next; the stage resides within the users local workspace and offers the end-user a chance to inspect previous successful and unsuccessful publishes. On a successful export from an application, this is where disparate files are assembled and injected with additional metadata\n\n\nShould this succeed, the are then moved to their final destination.\n\n\n\n\n\n\n\n\nHierarchy\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach directory will contain everything that did extract successfully, along with its metadata, for manual inspection and debugging.\n\n\n\n\nls\n()\n\n\nCommunication with the filesystem is made through \nls\n()\n.\n\n\nls\n()\n returns available assets - relative the currently registered root and silo directories - in the form of JSON-compatible dictionaries. Each dictionary is strictly formatted according to four distinct \n\"schemas\"\n.\n\n\nExample\n\n\nfrom\n \nmindbender\n \nimport\n \napi\n\n\n\nfor\n \nasset\n \nin\n \napi\n.\nls\n():\n\n    \nfor\n \nsubset\n \nin\n \nasset\n[\n\"subsets\"\n]:\n\n        \nfor\n \nversion\n \nin\n \nasset\n[\n\"versions\"\n]:\n\n            \nfor\n \nrepresentation\n \nin\n \nversion\n[\n\"representations\"\n]:\n\n                \npass\n\n\n\n\n\nSee below for a full list of members.\n\n\n\n\nSchema\n\n\n\n\nAvailable schemas are organised hierarchically, with the former containing the latter.\n\n\n\n\nasset\n.\njson\n\n\nsubset\n.\njson\n\n\nversion\n.\njson\n\n\nrepresentation\n.\njson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasset\n.\njson\n\n\nA part of a PROJECT, such as a Character or Shot.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of directory\n\n\n\n\n\n\nsubsets\n\n\nlist\n\n\n0 or more \nsubset\n.\njson\n\n\n\n\n\n\n\n\n\n\nsubset\n.\njson\n\n\nA part of an ASSET, such as a model or a rig.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of directory\n\n\n\n\n\n\nversions\n\n\nlist\n\n\n0 or more \nversion\n.\njson\n\n\n\n\n\n\n\n\n\n\nversion\n.\njson\n\n\nAn immutable iteration of a SUBSET.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nint\n\n\nNumber of this VERSION\n\n\n\n\n\n\npath\n\n\nstr\n\n\nUnformatted path, e.g. \n{\nroot\n}\n/\n\n\n\n\n\n\ntime\n\n\nstr\n\n\nISO formatted, file-system compatible time.\n\n\n\n\n\n\nauthor\n\n\nstr\n\n\nUser logged on to the machine at time of publish.\n\n\n\n\n\n\nsource\n\n\nstr\n\n\nOriginal file from which this VERSION was made.\n\n\n\n\n\n\nrepresentations\n\n\nlist\n\n\n0 or more \nrepresentation\n.\njson\n\n\n\n\n\n\n\n\nVersions are immutable, in that they never change once made. This is in stark contrast to mutable versions which is when one version may be \"updated\" such that the same file now contains new information.\n\n\n\n\nrepresentation\n.\njson\n\n\nOne of many representations of a VERSION.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nstr\n\n\nFile extension\n\n\n\n\n\n\npath\n\n\nstr\n\n\nUnformatted path\n\n\n\n\n\n\n\n\nThink of a representation as one way of storing the same set of data on disk. For example, an image may be stored as both PNG and JPEG. Different files, same data. It could also be stored as a description. \n\"A picture of my computer.\"\n Much less information is ultimately stored, but it is nonetheless the exact same original data in a different (albeit lossy) representation. The image could also be represented by a feeling (warm, mystical) or a spoken word (muah!).\n\n\nRepresentation are very powerful and lie at the heart of assets that are more than just a single file.\n\n\nAs a practical example, a Look is stored as both an MA scene file and a JSON. The JSON stores the shader relationships, whereas the MA file stores the actual shaers. Same data, different representations.\n\n\ncontainer\n.\njson\n\n\nAn imported VERSION, as yielded from \napi\n.\nregistered_host\n().\nls\n()\n.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\nstr\n\n\nContains \n\"mindbender-core:container-1.0\"\n\n\n\n\n\n\nname\n\n\nstr\n\n\nPipeline name of this container\n\n\n\n\n\n\nobjectName\n\n\nstr\n\n\nInternal name used in an application\n\n\n\n\n\n\nasset\n\n\nstr\n\n\nSource ASSET of this container\n\n\n\n\n\n\nsubset\n\n\nstr\n\n\nSource SUBSET of this container\n\n\n\n\n\n\nversion\n\n\nint\n\n\nSource VERSION of this container\n\n\n\n\n\n\npath\n\n\nstr\n\n\nPath to loaded VERSION\n\n\n\n\n\n\nsource\n\n\nstr\n\n\nAbsolute path to original scene\n\n\n\n\n\n\nauthor\n\n\nstr\n\n\nAuthor of VERSION\n\n\n\n\n\n\n\n\n\n\n\n\nMindbender API\n\n\nMindbender provides a \nstateful\n API.\n\n\nState is set and modified by calling any of the exposed registration functions, prefixed \nregister_\n*\n.\n\n\n\n\nPublic members of \nmindbender\n.\napi\n\n\n\n\n\n\n\n\nMember\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall\n(\nhost\n)\n\n\nstr\n\n\nInstall Mindbender into the current interpreter session\n\n\n\n\n\n\nuninstall\n()\n\n\nstr\n\n\nRevert installation\n\n\n\n\n\n\nls\n()\n\n\ngenerator\n\n\nList available assets, relative \nroot\n\n\n\n\n\n\nregistered_root\n()\n\n\nstr\n\n\nAbsolute path to current working directory\n\n\n\n\n\n\nformat_staging_dir\n(\nroot\n,\n \nname\n)\n\n\nstr\n\n\nReturn absolute path or staging directory relative arguments\n\n\n\n\n\n\nformat_shared_dir\n(\nroot\n)\n\n\nstr\n\n\nReturn absolute path of shared directory\n\n\n\n\n\n\nformat_version\n(\nversion\n)\n\n\nstr\n\n\nReturn file-system compatible string of \nversion\n\n\n\n\n\n\nfind_latest_version\n(\nversions\n)\n\n\nint\n\n\nGiven a series of string-formatted versions, return the latest one\n\n\n\n\n\n\nparse_version\n(\nversion\n)\n\n\nstr\n\n\nGiven an arbitrarily formatted string, return version number\n\n\n\n\n\n\nregister_root\n(\nroot\n)\n\n\n\n\nRegister currently active root\n\n\n\n\n\n\nregister_host\n(\nhost\n)\n\n\n\n\nRegister currently active host\n\n\n\n\n\n\nregister_plugins\n()\n\n\n\n\nRegister plug-ins bundled with Pyblish Mindbender\n\n\n\n\n\n\nderegister_plugins\n()\n\n\n\n\n\n\n\n\n\n\nregistered_host\n()\n\n\nmodule\n\n\nReturn currently registered host\n\n\n\n\n\n\nregistered_families\n()\n\n\nlist\n\n\nReturn currently registered families\n\n\n\n\n\n\nregistered_data\n()\n\n\nlist\n\n\nReturn currently registered data\n\n\n\n\n\n\nregistered_root\n()\n\n\nstr\n\n\nReturn currently registered root\n\n\n\n\n\n\n\n\n\n\n\n\nHost API\n\n\nA host must implement the following members.\n\n\n\n\n\n\n\n\nMember\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nls\n()\n\n\ngenerator\n\n\nList loaded assets\n\n\n\n\n\n\ncreate\n(\nname\n,\n \nfamily\n,\n \noptions\n=\nNone\n)\n\n\nstr\n\n\nBuild fixture for outgoing data (see \ninstance\n), returns instance.\n\n\n\n\n\n\nload\n(\nasset\n,\n \nsubset\n,\n \nversion\n=-\n1\n,\n \nrepresentation\n=\nNone\n)\n\n\nNone\n\n\nImport external data into \ncontainer\n\n\n\n\n\n\nupdate\n(\ncontainer\n,\n \nversion\n=-\n1\n)\n\n\nNone\n\n\nUpdate an existing container\n\n\n\n\n\n\nremove\n(\ncontainer\n)\n\n\nNone\n\n\nRemove an existing container\n\n\n\n\n\n\n\n\n\n\nInformation hierarchy\n\n\nLoaded data is stored in a \ncontainer\n. A container hosts a loaded asset along with metadata used to associate assets that use other assets, such as a Wheel asset used in a Car asset.\n\n\n\n\nId\n\n\nInternally, Pyblish instances and containers are distinguished from native content via an \"id\". For example, in Maya, the \nid\n is a user-defined attribute.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\npyblish\n.\nmindbender\n.\ncontainer\n\n\nUnit of incoming data\n\n\n...:\nmodel_GRP\n, \n...:\nrig_GRP\n\n\n\n\n\n\npyblish\n.\nmindbender\n.\ninstance\n\n\nUnit of outgoing data\n\n\nStrange_model_default\n\n\n\n\n\n\n\n\n\n\n\n\nContract\n\n\nMindbender defines these families.\n\n\n\n\n\n\n\n\nFamily\n\n\nDefinition\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nmindbender\n.\nmodel\n\n\nGeometry with deformable topology\n\n\nSpec\n\n\n\n\n\n\nmindbender\n.\nrig\n\n\nAn articulated \nmindbender\n.\nmodel\n for animators\n\n\nSpec\n\n\n\n\n\n\nmindbender\n.\nanimation\n\n\nPointcached \nmindbender\n.\nrig\n for rendering\n\n\nSpec\n\n\n\n\n\n\nmindbender\n.\nlookdev\n\n\nShaded \nmindbender\n.\nmodel\n for rendering\n\n\nSpec\n\n\n\n\n\n\n\n\n\n\n\n\nmindbender\n.\nmodel\n\n\nA generic representation of geometry.\n\n\n \nWorkflow\n\n\n\n\nCreate a new \nModel\n INSTANCE.\n\n\nAdd the \nROOT\n group\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nTexturing\n\n\nRigging\n\n\nFinal render\n\n\n\n\n \nRequirements\n\n\n\n\nAll DAG nodes must be parented to a single top-level transform\n\n\nNormals must be unlocked\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\ngeometry_SEL\n \n(\ngeometry\n)\n: Meshes suitable for rigging\n\n\naux_SEL\n \n(\nany\n,\n \noptional\n)\n: Auxilliary meshes for e.g. fast preview, collision geometry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmindbender\n.\nrig\n\n\nThe \nmindbender\n.\nrig\n contains the necessary implementation and interface for animators to animate. \n\n\n \nWorkfow\n\n\n\n\nAdd the \nROOT\n group\n\n\nAdd animatable controllers to an \nobjectSet\n called \ncontrols_SET\n\n\nAdd cachable meshes to an \nobjectSet\n called \nout_SET\n\n\n\n\nPublishing.\n\n\n\n\nCreate a new \nRig\n INSTANCE\n\n\nAdd \nROOT\n\n\nAdd \ncontrols_SET\n\n\nAdd \nout_SET\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nAnimation\n\n\n\n\n \nRequirements\n\n\n\n\nAll DAG nodes must be parented to a single top-level transform\n\n\nMust contain an \nobjectSet\n for controls and cachable geometry\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nin_SEL\n \n(\ngeometry\n,\n \noptional\n)\n: Geometry consumed by this rig\n\n\nout_SEL\n \n(\ngeometry\n)\n: Geometry produced by this rig\n\n\ncontrols_SEL\n \n(\ntransforms\n)\n: All animatable controls\n\n\nresources_SEL\n \n(\nany\n,\n \noptional\n)\n: Nodes that reference an external file\n\n\n\n\n\n\n\n\n\n\nmindbender\n.\nanimation\n\n\nPoint positions and normals represented as one Alembic file.\n\n\n \nWorkflow\n\n\nThe animator workflow is simplified by the fact that an INSTANCE is automatically created upon loading a rig.\n\n\n\n\nLoad rig\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nLighting\n\n\nFX\n\n\nCloth\n\n\nHair\n\n\n\n\n \nRequirements\n\n\n\n\nNone\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nmindbender\n.\nlookdev\n\n\n \nWorkflow\n\n\nShaders are exported relative the meshes in an INSTANCE.\n\n\n\n\nCreate a new \nLook\n INSTANCE\n\n\nAdd the \ntransform\n of each shaded mesh\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nLighting\n\n\n\n\n \nRequirements\n\n\n\n\nNone\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\nWho is the end result of this family intended for?\n\n\n\n\n\n\n\n\nRequirements\n\n\nWhat is expected of this ASSET before it passes the tests?\n\n\n\n\n\n\n\n\nData\n\n\nEnd-user configurable options\n\n\n\n\n\n\n\n\nSets\n\n\nCollection of specific items for publishing or use further down the pipeline.",
            "title": " "
        },
        {
            "location": "/1.0/#mindbender",
            "text": "The safe post-production pipeline       Keywords:  Film, games, content creation, pipeline    Objective:   Provide a unified framework within which artists at Mindbender may work efficiently.  Enable extending of said framework for future improvements and unique requirements.  Inspire further expansion upon a series of basic ideas.     Requirements:  Core functionality must be editable and extensible by the technical director.    Technology:  Mindbender is built upon  Pyblish ,  Python  and  bindings  for  Qt , and depends upon a Windows, Linux or MacOS operating system with  Autodesk Maya ,  The Foundry Nuke ,  SideFX Houdini  and other DCC content creation applications.",
            "title": "Mindbender"
        },
        {
            "location": "/1.0/#target-audience",
            "text": "To make the most out of this document, some knowledge and experience is assumed.      minimal  recommended      title  technical director  pipeline technical director    experience  1 year in advertisements or games  5+ years in feature film    software  windows, linux or macos  maya",
            "title": "Target Audience"
        },
        {
            "location": "/1.0/#introduction",
            "text": "Welcome to mindbender-core, the production pipeline at  Mindbender Animation Studio .   Table of contents   Features  Install  Update  Usage  Description  Batteries  Creator  Loader  Manager    API  Terminology  Filesystem API  Information Hierarchy  Private, Public and Stage  ls ()  asset . json  version . json  subset . json  representation . json  container . json    Mindbender API  Host API    Contract  mindbender . model  mindbender . rig  mindbender . animation  mindbender . lookdev    Homework  Contributing  Help",
            "title": "Introduction"
        },
        {
            "location": "/1.0/#features",
            "text": "This project currently boasts the following features.      Feature  Description       Open Source  Anyone can take part in testing, using and developing the pipeline on  GitHub .     Version Control  Entire pipeline is  reviewed  and  tested  prior to any change being made.     Issue Tracker  Feature requests, bugs and questions are reported, assigned and solved openly.     Single-command install and update via Git  Zero dependencies make for easy install and updates.     Environment management  The developer manages the environment without distrupting the end user     Directory management  Folders are automatically created as per the developers setup.     Application launcher  Control over which version of which software is launched along with its initial configuration.     Asset versioning  Every asset, including shots, are explicitly versioned - e.g. v001, v034     Asset subsets  Each asset, such as  Tarzan , contains one or more subsets, such as  model ,  rig  and  look .     Asset and shot uniformity  Shots are assets too.     Per project/shot settings  Globally configure the framerate of a given project.     Per family publishing of assets  Individually manage the validation and export assets of specific types, such as  model ,  rig  and  animation .     Per family loading of assets  Individually manage loading of the same specific types of assets.     Asset Metadata  Relevant information is stored alongside each published version     Tools  Graphical user interfaces for Creating, Publishing, Loading and Managing assets     Menus  Application menus for modeling, rigging and animation     Support for off-site freelancers/studios  No dependence on the local environment, the pipeline can be installed anywhere.     Support for Qt 4 and Qt 5 bindings  Transparently uses the most desirable binding of Qt wherever the pipeline is used.",
            "title": "Features"
        },
        {
            "location": "/1.0/#install",
            "text": "Mindbender takes the form of a \"git\" repository. Therefore, you will need to install  Git . Once installed, open up a terminal (Start > \"cmd\" > Enter) and type this in.  $ git clone https://github.com/mindbender-studio/setup mindbender-setup --recursive\n$  cd  mindbender-setup\n$ git checkout  1 .0 -b  1 .0\n$ git submodule update\n$ start .  Windows Explorer appears! Double-click  mb . bat  and off you go!    Congratulations!  You are now fully equipped to handle Mindbender tasks!  Next Step   Update  Customisation  Workflow",
            "title": "Install"
        },
        {
            "location": "/1.0/#update",
            "text": "To update mindbender-setup, run the  update . bat  file supplied within the  mindbender - setup  directory.  Alternatively, you may type this.  $  cd  mindbender-setup\n$ git pull\n$ git submodule update --recursive  It is safe to run these as many times as you'd like.",
            "title": "Update"
        },
        {
            "location": "/1.0/#customisation",
            "text": "The above is all that is required to get started with the Mindbender Pipeline. If you are at home and are just looking to try things out, feel free to play around. Create a few assets, publish them and familiarise yourself with the  workflow .  If you are at a studio, you will likely want to use your own projects with the Mindbender Launcher.  The next step is telling  mb . bat  about your local projects. From your terminal, type this.  $  cd  mindbender-setup\n$ notepad mb.bat  Notepad appears.  At the bottom of this file, replace  %REPLACE_ME%  with the absolute path to where your projects are located, such as  m : \\ f03_projects . Now type  mb . bat  again to access your own projects. Optionally, you may also create a shortcut of  mb . bat  to your Desktop, Start Menu or any location you prefer.",
            "title": "Customisation"
        },
        {
            "location": "/1.0/#usage",
            "text": "Mindbender is initialised by calling  install ()  with an interface for your host.  from   mindbender   import   api ,   maya  api . install ( maya )   Supported hosts   maya  nuke  houdini   From here, you model, rig and animate as per the  contract  below.",
            "title": "Usage"
        },
        {
            "location": "/1.0/#how-to-read-this-guide",
            "text": "Here are a few of the conventions used throughout this guide.   bold  words are used to augment important aspects of a sentence  UPPERCASE words are unique terminology, each detailed under  Terminology  below.  (1), (2) are used to division important aspects in a sentence.  code  is used to highlight words that occur in code.",
            "title": "How to read this guide"
        },
        {
            "location": "/1.0/#description",
            "text": "Mindbender is a content creation studio focusing on photo-realistic, yet exaggerated cartoons. They work across continents in Sweden, Brazil and Spain and therefore require an underlying pipeline that facilitate these activities.  Pyblish Mindbender works exclusively with computer generated imagery - which means no focus is put on video, sound or the integration of 3d and live action footage. It has been designed for use both locally and remotely, to bridge the gap between artists working together but in different locations.  Overview  This pipeline covers the entire pipeline at Mindbender, including asset and shot creation. A PROJECT is partitioned into SHOTs where each shot consists of one or more ASSETs.  This pipeline includes tools and Pyblish plug-ins for 4 common types of ASSETs in a typical production pipeline.   Modeling  Rigging  Animation  Look   These implement  (1)  a contract for each FAMILY of ASSETs and  (2)  their interface towards each other.",
            "title": "Description"
        },
        {
            "location": "/1.0/#batteries",
            "text": "Mindbender hosts a series of  graphical user interfaces  that aid the user in conforming to the specified  contracts .     Name  Purpose  Description      creator  control what goes out  Manage how data is outputted from an application.    loader  control what goes in  Keep tabs on where data comes from so as to enable tracking and builds.    manager  stay up to date  Notification and visualisation of loaded data.",
            "title": "Batteries"
        },
        {
            "location": "/1.0/#creator",
            "text": "Associate content with a family.  The family is what determins how the content is handled throughout your pipeline and tells Pyblish what it should look like when valid.  API  The creator respects families registered with Mindbender.  from   mindbender   import   api  api . register_family ( \n     name = \"my.family\" , \n     help = \"My custom family\" ,  )   For each family, a  common set of data  is automatically associated with the resulting instance.  { \n     \"id\" :   \"pyblish.mindbender.instance\" , \n     \"family\" :   { chosen   family } \n     \"name\" :   { chosen   name }  }   Additional common  data can be added.  from   mindbender   import   api  api . register_data ( \n     key = \"myKey\" , \n     value = \"My value\" , \n     help = \"A special key\"  )   Data may be  associated  with a family.  from   mindbender   import   api  api . register_family ( \n     name = \"my.family\" , \n     data = [ \n         { \"key\" :   \"name\" ,   \"value\" :   \"marcus\" ,   \"help\" :   \"Your name\" }, \n         { \"key\" :   \"age\" ,   \"value\" :   30 ,   \"help\" :   \"Your age\" },  ])",
            "title": "Creator"
        },
        {
            "location": "/1.0/#loader",
            "text": "Visualise results from  api . ls () .  from   mindbender   import   api  for   asset   in   api . ls (): \n     print ( asset [ \"name\" ])   API  The results from  api . ls ()  depends on the currently  registered root .  from   mindbender   import   api  api . register_root ( \"/projects/gravity\" )   The chosen  ASSET  is passed to the  load ()  function of the currently registered host.  from   mindbender   import   api ,   maya  api . register_host ( maya )   A host is automatically registered on  api . install () .",
            "title": "Loader"
        },
        {
            "location": "/1.0/#manager",
            "text": "Visualise loaded assets.  from   mindbender   import   maya  for   container   in   maya . ls (): \n     print ( container [ \"name\" ])  # The same is true for any host; houdini, nuke etc.   API  The results from  ls ()  depends on the currently registered host, such as Maya.  from   mindbender   import   nuke  api . register_host ( nuke )",
            "title": "Manager"
        },
        {
            "location": "/1.0/#api",
            "text": "Mindbender exposes a series of interrelated APIs to the end-user.     Name  Purpose      Terminal API  Defines how the  artist  interacts with  tasks    Filesystem API  Defines how the  developer  interact with  data  on disk    Mindbender API  Defines how the  developer  interacts with  Mindbender    Host API  Defines how the  host  interacts with  Mindbender",
            "title": "API"
        },
        {
            "location": "/1.0/#terminology",
            "text": "Mindbender reserves the following words for private and public use. Public members are exposed to the user, private ones are internal to the implementation.      Term  Public  Description  Example       PROJECTS  X  Parent of projects  m : \\ f03_projects     PROJECT  X  Root of information  Gravity, Dr. Strange     ASSET  X  Unit of data  Ryan, Bicycle, Flower pot     VERSION  X  An ASSET iteration  v1, v034     REPRESENTATION   A data format  Maya file, pointcache, thumbnail     FORMAT   A file extension  .ma ,  .abc ,  .ico ,  .png     FAMILY  X  A type of ASSET  model ,  rig ,  look ,  animation     WORKSPACE  X  Private data  Scenefile for v034 of Ryan     SILO   Data repository  Ryan resides in  assets , caches in  film .     INSTANCE   Inverse of a file  modelDefault_SET     STAGE   Transient data  Outgoing VERSION from scenefile     SHARED  X  Public data  v034 of Ryan     PRODUCER   Creator of data  You     CONSUMER   User of data  Me",
            "title": "Terminology"
        },
        {
            "location": "/1.0/#terminal-api",
            "text": "mb . bat  (pronounced \"embee-bat\") is the Mindbender Launcher. It is how artists launch applications, such as Maya and Nuke. It establishes important environment variables used when producing and publishing data, along with exposing artists to tools relevant a given project.    project.bat  mb . bat  is where artists enter the pipeline. A user may then enter any of the available projects, via a  project . bat  file.  The project file is located in your PROJECTS directory  @echo off\ncall _mkproject %~dp0 %~n0 %1  asset.bat  @echo off\ncall _mkproject %~dp0 %~n0 %1  The layout is as follows.   { PROJECT }  (with TAB-completion)  { ASSET }  or Shot (with TAB-COMPLETION)  { APPLICATION }   { TASK }   The given TASK is automatically created, unless it already exists.  Environment variables     Variable  Description      PROJECT  Nice name of PROJECT, e.g. Gifts for Greta    PROJECTDIR  Absolute path to PROJECT, e.g. m:\\f01_projects\\p999_Gifts_for_Greta    ROOT  Top level directory of either shot or asset, e.g. ..\\Greta",
            "title": "Terminal API"
        },
        {
            "location": "/1.0/#filesystem-api",
            "text": "Data is organised into  files  and  folders .  Some files and folders have special meaning in Mindbender.",
            "title": "Filesystem API"
        },
        {
            "location": "/1.0/#information-hierarchy",
            "text": "The mental and physical model for files and folders look like this.",
            "title": "Information Hierarchy"
        },
        {
            "location": "/1.0/#private-public-and-stage",
            "text": "During the course of the creation of any ASSET, data moves between 2 of 3 states.    The pipeline does not take into consideration the workspace and is therefore  workspace-agnostic .   The  staging area  is both implicit and transparent to the PRODUCER and CONSUMER, except for debugging purposes. This is where automatic/scheduled garbage collection may run to optimise for space constraints.  The  shared space  is where ASSETs ultimately reside once published.    Private and Public separation  A naive approach to content creation might be to refer to ASSETs straight from another artists workspace. At Mindbender, data is separated between work-in-progress (private) and data exposed to others (public).  Private data resides in  work , public data resides in  publish .   Private data is highly  mutable  and typically  private  to an individual artist.   Mutable  implies transient data that is likely to change at any given moment.  Private  implies personal, highly irregular and likely invalid data.   Public data on the other hand is  immutable ,  correct  and  impersonal .   Immutable  implies that the data may be dependent upon by other data.  Correct  implies passing validation of the associated family.  Impersonal  implies following strict organisational conventions.     Each  ASSET  reside within a top-level ROOT and SILO directory as follows.     Hierarchy  Example            Each ASSET contains a  work  and  publish  directory.  work  is where artists save their own files while working, whereas  publish  is where published files go.  The  publish  directory contains 0 or more  SUBSETS  which in turn contains 0 or more  VERSIONS     Hierarchy  Example            Each VERSION contains 1 or more  REPRESENTATIONS .     Example           All data is written in 3 stages.   To a local  / temp  directory.  To a \"staging\" directory  To the final destination.   Data is first written locally, so as to not burden a potentially remote filesystem with sporadic writes performed by an application - for example, caching may be bound by parsing of geometry, and not I/O bound. Which means many small writing requests are scattered when exporting a large file.  It also alleviates the remote system from times where writing is cancelled or otherwise fails.  The staging area is where files are written next; the stage resides within the users local workspace and offers the end-user a chance to inspect previous successful and unsuccessful publishes. On a successful export from an application, this is where disparate files are assembled and injected with additional metadata  Should this succeed, the are then moved to their final destination.     Hierarchy  Example           Each directory will contain everything that did extract successfully, along with its metadata, for manual inspection and debugging.",
            "title": "Private, Public and Stage"
        },
        {
            "location": "/1.0/#ls",
            "text": "Communication with the filesystem is made through  ls () .  ls ()  returns available assets - relative the currently registered root and silo directories - in the form of JSON-compatible dictionaries. Each dictionary is strictly formatted according to four distinct  \"schemas\" .  Example  from   mindbender   import   api  for   asset   in   api . ls (): \n     for   subset   in   asset [ \"subsets\" ]: \n         for   version   in   asset [ \"versions\" ]: \n             for   representation   in   version [ \"representations\" ]: \n                 pass   See below for a full list of members.",
            "title": "ls()"
        },
        {
            "location": "/1.0/#schema",
            "text": "Available schemas are organised hierarchically, with the former containing the latter.   asset . json  subset . json  version . json  representation . json",
            "title": "Schema"
        },
        {
            "location": "/1.0/#assetjson",
            "text": "A part of a PROJECT, such as a Character or Shot.     Key  Value  Description      name  str  Name of directory    subsets  list  0 or more  subset . json",
            "title": "asset.json"
        },
        {
            "location": "/1.0/#subsetjson",
            "text": "A part of an ASSET, such as a model or a rig.     Key  Value  Description      name  str  Name of directory    versions  list  0 or more  version . json",
            "title": "subset.json"
        },
        {
            "location": "/1.0/#versionjson",
            "text": "An immutable iteration of a SUBSET.     Key  Value  Description      version  int  Number of this VERSION    path  str  Unformatted path, e.g.  { root } /    time  str  ISO formatted, file-system compatible time.    author  str  User logged on to the machine at time of publish.    source  str  Original file from which this VERSION was made.    representations  list  0 or more  representation . json     Versions are immutable, in that they never change once made. This is in stark contrast to mutable versions which is when one version may be \"updated\" such that the same file now contains new information.",
            "title": "version.json"
        },
        {
            "location": "/1.0/#representationjson",
            "text": "One of many representations of a VERSION.     Key  Value  Description      format  str  File extension    path  str  Unformatted path     Think of a representation as one way of storing the same set of data on disk. For example, an image may be stored as both PNG and JPEG. Different files, same data. It could also be stored as a description.  \"A picture of my computer.\"  Much less information is ultimately stored, but it is nonetheless the exact same original data in a different (albeit lossy) representation. The image could also be represented by a feeling (warm, mystical) or a spoken word (muah!).  Representation are very powerful and lie at the heart of assets that are more than just a single file.  As a practical example, a Look is stored as both an MA scene file and a JSON. The JSON stores the shader relationships, whereas the MA file stores the actual shaers. Same data, different representations.",
            "title": "representation.json"
        },
        {
            "location": "/1.0/#containerjson",
            "text": "An imported VERSION, as yielded from  api . registered_host (). ls () .     Key  Value  Description      schema  str  Contains  \"mindbender-core:container-1.0\"    name  str  Pipeline name of this container    objectName  str  Internal name used in an application    asset  str  Source ASSET of this container    subset  str  Source SUBSET of this container    version  int  Source VERSION of this container    path  str  Path to loaded VERSION    source  str  Absolute path to original scene    author  str  Author of VERSION",
            "title": "container.json"
        },
        {
            "location": "/1.0/#mindbender-api",
            "text": "Mindbender provides a  stateful  API.  State is set and modified by calling any of the exposed registration functions, prefixed  register_ * .   Public members of  mindbender . api     Member  Returns  Description      install ( host )  str  Install Mindbender into the current interpreter session    uninstall ()  str  Revert installation    ls ()  generator  List available assets, relative  root    registered_root ()  str  Absolute path to current working directory    format_staging_dir ( root ,   name )  str  Return absolute path or staging directory relative arguments    format_shared_dir ( root )  str  Return absolute path of shared directory    format_version ( version )  str  Return file-system compatible string of  version    find_latest_version ( versions )  int  Given a series of string-formatted versions, return the latest one    parse_version ( version )  str  Given an arbitrarily formatted string, return version number    register_root ( root )   Register currently active root    register_host ( host )   Register currently active host    register_plugins ()   Register plug-ins bundled with Pyblish Mindbender    deregister_plugins ()      registered_host ()  module  Return currently registered host    registered_families ()  list  Return currently registered families    registered_data ()  list  Return currently registered data    registered_root ()  str  Return currently registered root",
            "title": "Mindbender API"
        },
        {
            "location": "/1.0/#host-api",
            "text": "A host must implement the following members.     Member  Returns  Description      ls ()  generator  List loaded assets    create ( name ,   family ,   options = None )  str  Build fixture for outgoing data (see  instance ), returns instance.    load ( asset ,   subset ,   version =- 1 ,   representation = None )  None  Import external data into  container    update ( container ,   version =- 1 )  None  Update an existing container    remove ( container )  None  Remove an existing container      Information hierarchy  Loaded data is stored in a  container . A container hosts a loaded asset along with metadata used to associate assets that use other assets, such as a Wheel asset used in a Car asset.   Id  Internally, Pyblish instances and containers are distinguished from native content via an \"id\". For example, in Maya, the  id  is a user-defined attribute.     Name  Description  Example      pyblish . mindbender . container  Unit of incoming data  ...: model_GRP ,  ...: rig_GRP    pyblish . mindbender . instance  Unit of outgoing data  Strange_model_default",
            "title": "Host API"
        },
        {
            "location": "/1.0/#contract",
            "text": "Mindbender defines these families.     Family  Definition  Link      mindbender . model  Geometry with deformable topology  Spec    mindbender . rig  An articulated  mindbender . model  for animators  Spec    mindbender . animation  Pointcached  mindbender . rig  for rendering  Spec    mindbender . lookdev  Shaded  mindbender . model  for rendering  Spec",
            "title": "Contract"
        },
        {
            "location": "/1.0/#mindbendermodel",
            "text": "A generic representation of geometry.    Workflow   Create a new  Model  INSTANCE.  Add the  ROOT  group  Publish     Target Audience   Texturing  Rigging  Final render     Requirements   All DAG nodes must be parented to a single top-level transform  Normals must be unlocked     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   geometry_SEL   ( geometry ) : Meshes suitable for rigging  aux_SEL   ( any ,   optional ) : Auxilliary meshes for e.g. fast preview, collision geometry",
            "title": "mindbender.model"
        },
        {
            "location": "/1.0/#mindbenderrig",
            "text": "The  mindbender . rig  contains the necessary implementation and interface for animators to animate.     Workfow   Add the  ROOT  group  Add animatable controllers to an  objectSet  called  controls_SET  Add cachable meshes to an  objectSet  called  out_SET   Publishing.   Create a new  Rig  INSTANCE  Add  ROOT  Add  controls_SET  Add  out_SET  Publish     Target Audience   Animation     Requirements   All DAG nodes must be parented to a single top-level transform  Must contain an  objectSet  for controls and cachable geometry     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   in_SEL   ( geometry ,   optional ) : Geometry consumed by this rig  out_SEL   ( geometry ) : Geometry produced by this rig  controls_SEL   ( transforms ) : All animatable controls  resources_SEL   ( any ,   optional ) : Nodes that reference an external file",
            "title": "mindbender.rig"
        },
        {
            "location": "/1.0/#mindbenderanimation",
            "text": "Point positions and normals represented as one Alembic file.    Workflow  The animator workflow is simplified by the fact that an INSTANCE is automatically created upon loading a rig.   Load rig  Publish     Target Audience   Lighting  FX  Cloth  Hair     Requirements   None     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   None",
            "title": "mindbender.animation"
        },
        {
            "location": "/1.0/#mindbenderlookdev",
            "text": "Workflow  Shaders are exported relative the meshes in an INSTANCE.   Create a new  Look  INSTANCE  Add the  transform  of each shaded mesh  Publish     Target Audience   Lighting     Requirements   None     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   None      Legend      Title  Description       Target Audience  Who is the end result of this family intended for?     Requirements  What is expected of this ASSET before it passes the tests?     Data  End-user configurable options     Sets  Collection of specific items for publishing or use further down the pipeline.",
            "title": "mindbender.lookdev"
        },
        {
            "location": "/2.0/",
            "text": "Avalon\n\n\n\n\n\n\n\n    \n\n    \nThe safe post-production pipeline\n\n\n\n\n\n\n\nDownload\n\n\n\n\n\n\n\n\n\n\n\n    \n\n        \n\n            \nGo to documentation\n\n        \n\n        \n\n            \n\n                \n\n            \n\n            \nLearn\n\n            \nGuides and tutorials. Start here if you're new to Avalon.\n\n        \n\n    \n\n\n    \n\n        \n\n            \nGo to API reference\n\n        \n\n        \n\n            \n\n                \n\n            \n\n            \nReference\n\n            \nTechnical reference for APIs and other aspects of Avalon.\n\n        \n\n    \n\n\n    \n\n        \n\n            \nGo to GitHub\n\n        \n\n        \n\n            \n\n                \n\n            \n\n            \nGitHub\n\n            \nContribute to the MIT-licensed project on GitHub.\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \nGitter\n \n|\n\n        \nForums\n \n|\n\n        \nJournal\n \n|\n\n        \nIssue Tracker\n \n|\n\n    \n\n\n\n\n\n\n\n\n\nScreenshots\n\n\n\nTo give you a sense of what's in store, here are some images from Avalon graphical user interfaces.\n\n\n\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n\n\n\n\n\n\n\n\n\nLearn more\n\n\nGo to API Reference\n\n\nGo to GitHub",
            "title": " "
        },
        {
            "location": "/2.0/#avalon",
            "text": "The safe post-production pipeline    Download     \n     \n         \n             Go to documentation",
            "title": "Avalon"
        },
        {
            "location": "/2.0/overview/",
            "text": "Home\n\n\nAvalon is an end-to-end, free and open source data pipeline powering \nAnimation and VFX studios\n during the production of computer generated imagery.\n\n\n\n\nSee \nWhat is Avalon?\n for details.\n\n\n\n\n\n\n\n\nHow this documentation is organized\n\n\nA high-level overview of how it's organized will help you know where to look for certain things:\n\n\n\n\nGuides\n\u00a0provide short and self-contained learning material\n\n\nTutorials\n\u00a0take you by the hand through a series of steps to producing your first asset. Start here if you're new to Avalon or content creation.\n\n\nReference\n detail each individual concept in Avalon\n\n\nTools\n contain self-help material for each graphical user interface available\n\n\nGlossary\n break down jargon used throughout this documentation\n\n\n\n\n\n\n\n\nWhat is Avalon?\n\n\nAvalon is the data pipeline between persons, applications, file systems and database as content is created.\n\n\n\n\nIt sits right inbetween organisational concerns such as scheduling and budgets, and operating systems related issues such as dependencies and user authentication, with some overlap into each.\n\n\n\n\nIt overlaps into people management by hooking into tasks supplied via production tracking systems such as ftrack and Shotgun, and into the OS by writing to protected areas via web services.\n\n\n\n\n\n\nMore resources\n\n\n\n\nAndrew Whitehurst on the visual effects pipeline\n\n\nThe Art of CG Supervision\n\n\n\n\n\n\n\n\nWho is using Avalon?\n\n\n\n\nColorbleed\n\n\nMoonshine VFX\n\n\nKredenc\n\n\nBumpybox\n\n\nSubmarine\n\n\nJob, Joris en Marieke\n\n\n3DE\n\n\nImagine Studio\n\n\nClothCat Animation\n\n\nThe Scope\n\n\nFourth Wall Animation\n\n\nIncognito\n\n\n\n\n\n\nMissing your name?\n\n\nMissing your name? Let us know on \nAvalon Gitter\n or set up a PR to \ngetavalon\n/\ndocs\n.",
            "title": "Overview"
        },
        {
            "location": "/2.0/overview/#home",
            "text": "Avalon is an end-to-end, free and open source data pipeline powering  Animation and VFX studios  during the production of computer generated imagery.   See  What is Avalon?  for details.",
            "title": "Home"
        },
        {
            "location": "/2.0/overview/#how-this-documentation-is-organized",
            "text": "A high-level overview of how it's organized will help you know where to look for certain things:   Guides \u00a0provide short and self-contained learning material  Tutorials \u00a0take you by the hand through a series of steps to producing your first asset. Start here if you're new to Avalon or content creation.  Reference  detail each individual concept in Avalon  Tools  contain self-help material for each graphical user interface available  Glossary  break down jargon used throughout this documentation",
            "title": "How this documentation is organized"
        },
        {
            "location": "/2.0/overview/#what-is-avalon",
            "text": "Avalon is the data pipeline between persons, applications, file systems and database as content is created.   It sits right inbetween organisational concerns such as scheduling and budgets, and operating systems related issues such as dependencies and user authentication, with some overlap into each.   It overlaps into people management by hooking into tasks supplied via production tracking systems such as ftrack and Shotgun, and into the OS by writing to protected areas via web services.    More resources   Andrew Whitehurst on the visual effects pipeline  The Art of CG Supervision",
            "title": "What is Avalon?"
        },
        {
            "location": "/2.0/overview/#who-is-using-avalon",
            "text": "Colorbleed  Moonshine VFX  Kredenc  Bumpybox  Submarine  Job, Joris en Marieke  3DE  Imagine Studio  ClothCat Animation  The Scope  Fourth Wall Animation  Incognito    Missing your name?  Missing your name? Let us know on  Avalon Gitter  or set up a PR to  getavalon / docs .",
            "title": "Who is using Avalon?"
        },
        {
            "location": "/2.0/guides/",
            "text": "How to\n\n\nHere you'll find short answers to \"How do I..?\" types of questions. These how-to guides don't cover topics in depth \u2013 you'll find that material in the \nUsing Avalon\n and the \nReference\n. However, these guides will help you quickly accomplish common tasks.\n\n\n\n\n\n\n\n\nInstall\n\n\nLet's get cooking!\n\n\n\n\nReading Code\n\n\nYou have two options for reading code in this document, one for Windows (cmd) and one for Unix system, including MacOS (bash).\n\n\n\n  \ncmd\n\n  \nbash\n\n\n\n\n\n\nThese lines are for cmd.exe, typically used in Windows\n\n\n\n\n\n\n\nThese lines are \nfor\n bash, typically used in MacOS and Linux\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\nIn order to use Avalon, here's what you need.\n\n\n\n\nWindows, Linux or OSX\n\n\nGit 2.0\n or above\n\n\nPython 3.6\n or above\n\n\nMongoDB Community Server 3.4\n or above\n\n\n\n\nEnsure you have PyQt5 installed.\n\n\npip install \nPyQt5\n==\n5\n.12\n\n\n\n\nAvalon may run with newer version of PyQt5, but if you encounter any issues, please revert to this exact version.\n\n\nTest installations\n\n\nMake sure that you are able to successfully type these commands before continuing.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\npython --version\n\nrem Python 3.6.1\n\npython -c \n\"from PyQt5.QtCore import PYQT_VERSION_STR as version;print(version)\"\n\n\nrem 5.9\n\ngit --version\n\nrem git version 2.8.3.windows.1\n\nmongo --eval \n\"db.version()\"\n --quiet\n\nrem 3.6.4\n\n\n\n\n\n\n    \nTrouble?\n\n\n\n\n\n\nIf \n'mongo'\n \nis\n \nnot\n \nrecognized\n \nas\n \nan\n \ninternal\n \nor\n \nexternal\n \ncommand\n, add it to your PATH and try again.\n\n\nset\n \nPATH\n=\nC:\\Program Files\\MongoDB\\Server\\3.6\\bin;\n%PATH%\n\nsetx PATH \n\"C:\\Program Files\\MongoDB\\Server\\3.6\\bin;\n%PATH%\n\"\n\n\n\n\n\nIf \nmongo\n is reporting connectivity problems, try creating the default storage directory and starting the MongoDB server, \nmongod\n.\nexe\n.\n\n\nmkdir\n c:\\data\\db\n\nstart\n \n\"MongoDB\"\n \n\"c:\\Program Files\\MongoDB\\Server\\3.6\\bin\\mongod.exe\"\n\n\n\n\n\n\n\nSee \nInstall MongoDB Community Edition on Windows\n for details.\n\n\n\n\n\n\n\n\n\npython --version\n\n# Python 3.6.1\n\npython -c \n\"from PyQt5.QtCore import PYQT_VERSION_STR as version;print(version)\"\n\n\n# 5.9\n\ngit --version\n\n# git version 2.8.3.linux.1\n\nmongo --eval \n\"db.version()\"\n --quiet\n\n# 3.4.4\n\n\n\n\n\n\n    \nTrouble?\n\n\n\n\n\n\n\n\nFor Red Hat and CentOS 7 systems, see \nhere\n for details.\n\n\n\n\n\n\n\n\n\nDownload\n\n\nAt this point we are ready to download Avalon, distributed as a single directory with dependencies included.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\ngit clone https://github.com/getavalon/setup avalon-setup --recursive\n\ncd\n avalon-setup\ngit submodule update --recursive --remote\n\n\n\n\n\n\n\n\ngit clone https://github.com/getavalon/setup avalon-setup --recursive\n\ncd\n avalon-setup\ngit submodule update --recursive --remote\n\n\n\n\n\n\n\n\nUpdating Avalon\n\n\nSee \nUpdate\n to learn how to update including all its submodules at a later date.\n\n\n\n\n\n\nCommand-line Interface\n\n\nAvalon offers a command-line interface through which every interaction takes place.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\nset\n \nPATH\n=\n%cd%\n\\avalon-setup;\n%PATH%\n\n\n\n\n\n\n\n\n\nexport\n \nPATH\n=\n$(\npwd\n)\n/avalon-setup:\n$PATH\n\n\n\n\n\n\n\nYou can test the success of this operation by calling \n--help\n.\n\n\n\n\navalon --help\n\n\n\n\n\n\nIn order to make this command available permanently, you can add it to your system environment.\n\n\n\n\nsetx PATH \n\"\n%cd%\n\\avalon-setup;\n%PATH%\n\"\n\n\n\n\n\n\n\n\n\necho\n \nPATH\n=\n$(\npwd\n)\n/avalon-setup:\n$PATH\n >> ~/.bashrc\n\n\n\n\n\n\n\n\nTrouble with environment variables?\n\n\nAvalon uses environment variables a lot. A thorough understanding of them is an important part of maintaining an Avalon pipeline.\n\n\nSee \nEnvironment Variables\n for learning resources.\n\n\n\n\n\n\n\n\n\n\nDemo\n\n\nIf you have just discovered Avalon and would like to take it for a spin, this section is for you.\n\n\nPrerequisites\n\n\n\n\nAutodesk Maya 2015\n or above.\n\n\n\n\nUpload Example Project\n\n\nAvalon ships with at least one example project. In order to make use of it, we'll upload it into your database.\n\n\n\n\nYour Database\n\n\nIf you installed MongoDB locally then the default address is \nmongodb\n:\n//\nlocalhost\n:\n27017\n\n\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\navalon --import batman\n\n\n\n\n\n\nThat's it. Now we're ready to launch Maya through Avalon.\n\n\n\n\navalon\n\n\n\n\n\n\nIn this project, you'll find a number of assets, including a character - \nBruce\n - and an animated shot - \nshot1\n.\n\n\nGo ahead and open up Maya and load a few assets!\n\n\n\n\n\n\n\n\nUpdate\n\n\nTo update avalon-setup, type this.\n\n\n$ \ncd\n avalon-setup\n$ git pull\n$ git submodule init\n$ git submodule update --recursive\n\n\n\n\nIt is safe to run these as many times as you'd like.",
            "title": "Guides"
        },
        {
            "location": "/2.0/guides/#how-to",
            "text": "Here you'll find short answers to \"How do I..?\" types of questions. These how-to guides don't cover topics in depth \u2013 you'll find that material in the  Using Avalon  and the  Reference . However, these guides will help you quickly accomplish common tasks.",
            "title": "How to"
        },
        {
            "location": "/2.0/guides/#install",
            "text": "Let's get cooking!   Reading Code  You have two options for reading code in this document, one for Windows (cmd) and one for Unix system, including MacOS (bash).  \n   cmd \n   bash    These lines are for cmd.exe, typically used in Windows    These lines are  for  bash, typically used in MacOS and Linux",
            "title": "Install"
        },
        {
            "location": "/2.0/guides/#prerequisites",
            "text": "In order to use Avalon, here's what you need.   Windows, Linux or OSX  Git 2.0  or above  Python 3.6  or above  MongoDB Community Server 3.4  or above   Ensure you have PyQt5 installed.  pip install  PyQt5 == 5 .12  Avalon may run with newer version of PyQt5, but if you encounter any issues, please revert to this exact version.",
            "title": "Prerequisites"
        },
        {
            "location": "/2.0/guides/#test-installations",
            "text": "Make sure that you are able to successfully type these commands before continuing.  \n   \n     cmd \n   \n   \n     bash \n      python --version rem Python 3.6.1 \npython -c  \"from PyQt5.QtCore import PYQT_VERSION_STR as version;print(version)\"  rem 5.9 \ngit --version rem git version 2.8.3.windows.1 \nmongo --eval  \"db.version()\"  --quiet rem 3.6.4   \n     Trouble?    If  'mongo'   is   not   recognized   as   an   internal   or   external   command , add it to your PATH and try again.  set   PATH = C:\\Program Files\\MongoDB\\Server\\3.6\\bin; %PATH% \nsetx PATH  \"C:\\Program Files\\MongoDB\\Server\\3.6\\bin; %PATH% \"   If  mongo  is reporting connectivity problems, try creating the default storage directory and starting the MongoDB server,  mongod . exe .  mkdir  c:\\data\\db start   \"MongoDB\"   \"c:\\Program Files\\MongoDB\\Server\\3.6\\bin\\mongod.exe\"    See  Install MongoDB Community Edition on Windows  for details.     python --version # Python 3.6.1 \npython -c  \"from PyQt5.QtCore import PYQT_VERSION_STR as version;print(version)\"  # 5.9 \ngit --version # git version 2.8.3.linux.1 \nmongo --eval  \"db.version()\"  --quiet # 3.4.4   \n     Trouble?     For Red Hat and CentOS 7 systems, see  here  for details.",
            "title": "Test installations"
        },
        {
            "location": "/2.0/guides/#download",
            "text": "At this point we are ready to download Avalon, distributed as a single directory with dependencies included.  \n   \n     cmd \n   \n   \n     bash \n      git clone https://github.com/getavalon/setup avalon-setup --recursive cd  avalon-setup\ngit submodule update --recursive --remote    git clone https://github.com/getavalon/setup avalon-setup --recursive cd  avalon-setup\ngit submodule update --recursive --remote    Updating Avalon  See  Update  to learn how to update including all its submodules at a later date.",
            "title": "Download"
        },
        {
            "location": "/2.0/guides/#command-line-interface",
            "text": "Avalon offers a command-line interface through which every interaction takes place.  \n   \n     cmd \n   \n   \n     bash \n      set   PATH = %cd% \\avalon-setup; %PATH%     export   PATH = $( pwd ) /avalon-setup: $PATH    You can test the success of this operation by calling  --help .   avalon --help   In order to make this command available permanently, you can add it to your system environment.   setx PATH  \" %cd% \\avalon-setup; %PATH% \"     echo   PATH = $( pwd ) /avalon-setup: $PATH  >> ~/.bashrc    Trouble with environment variables?  Avalon uses environment variables a lot. A thorough understanding of them is an important part of maintaining an Avalon pipeline.  See  Environment Variables  for learning resources.",
            "title": "Command-line Interface"
        },
        {
            "location": "/2.0/guides/#demo",
            "text": "If you have just discovered Avalon and would like to take it for a spin, this section is for you.",
            "title": "Demo"
        },
        {
            "location": "/2.0/guides/#prerequisites_1",
            "text": "Autodesk Maya 2015  or above.",
            "title": "Prerequisites"
        },
        {
            "location": "/2.0/guides/#upload-example-project",
            "text": "Avalon ships with at least one example project. In order to make use of it, we'll upload it into your database.   Your Database  If you installed MongoDB locally then the default address is  mongodb : // localhost : 27017   \n   \n     cmd \n   \n   \n     bash \n      avalon --import batman   That's it. Now we're ready to launch Maya through Avalon.   avalon   In this project, you'll find a number of assets, including a character -  Bruce  - and an animated shot -  shot1 .  Go ahead and open up Maya and load a few assets!",
            "title": "Upload Example Project"
        },
        {
            "location": "/2.0/guides/#update",
            "text": "To update avalon-setup, type this.  $  cd  avalon-setup\n$ git pull\n$ git submodule init\n$ git submodule update --recursive  It is safe to run these as many times as you'd like.",
            "title": "Update"
        },
        {
            "location": "/2.0/tutorials/",
            "text": "Tutorials\n\n\nHere you'll find a series of steps to achieve a goal.\n\n\n\n\n\n\nCreate your first project\n\n\nTo create a new project, create a new directory and fetch default values like this.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\nmkdir myProject\n\ncd\n myProject\navalon --init\n\n# Edit .inventory.toml and .config.toml\n\navalon --save\n\n\n\n\n\n\n--init\n and \n--save\n will take into account the name of the parent directory as the project name and produce two files, the \"inventory\" and \"config\". You can override this via \n--root\n. See \n--help\n for details.\n\n\n\n\nSee \nProject Inventory API\n for details on how to manage your \n.inventory.toml\n file.\n\n\nSee \nProject Configuration API\n for details on how to manage your \n.config.toml\n file.\n\n\n\n\n\n\n\n\n\n\nCreate your second project\n\n\nOnce you've tailored the configuration and inventory to your liking, you can re-use them for future projects.\n\n\n\n\nCopy your \n.config.toml\n and \n.inventory.toml\n files from your first project.\n\n\nRun the \n--save\n command\n\n\n\n\nFor example\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\nmkdir\n mySecondProject\n\ncd\n mySecondProject\n\ncopy\n ../myProject/.* ./\navalon --save\n\n\n\n\n\n\n\n\nmkdir mySecondProject\n\ncd\n mySecondProject\ncp ../myProject/.* ./\navalon --save\n\n\n\n\n\n\nThe \n--init\n command is used to write a generic configuration and inventory to your current working directory. If you already have some, it isn't necessary.\n\n\n\n\n\n\n\n\nCreate your first asset\n\n\nWith a project up and running, how do you actually go about creating assets?\n\n\ncd\n myproject\navalon --load\n\n# Edit .inventory.toml\n\navalon --save\n\n\n\n\nWith \n--load\n, the \n.inventory.toml\n is written to your current working directory, ready for you to edit. Here's an example entry into the \n.inventory.toml\n.\n\n\n[[assets]]\n\n\nname\n \n=\n \n\"Batman\"\n\n\nlabel\n \n=\n \n\"The Batman\"  # (Optional) Nicer name\n\n\ngroup\n \n=\n \n\"Character\"  # (Optional) Visual grouping\n\n\nicon\n \n=\n \n\"gear\"  # (Optional) Icon from FontAwesome\n\n\n\n\n\nWith the changes saved, you'll find the new asset in the Launcher.\n\n\n\n\nLoad project by name\n\n\nNormally, the project name is derived from the current working directory. You may also pass a project name to the \n--load\n argument, e.g. \n--load myproject\n\n\n\n\n\n\nList available projects\n\n\nWhen loading a project for the first time, you can list available in the Avalon database via \navalon\n \n--ls",
            "title": "Tutorials"
        },
        {
            "location": "/2.0/tutorials/#tutorials",
            "text": "Here you'll find a series of steps to achieve a goal.",
            "title": "Tutorials"
        },
        {
            "location": "/2.0/tutorials/#create-your-first-project",
            "text": "To create a new project, create a new directory and fetch default values like this.  \n   \n     cmd \n   \n   \n     bash \n      mkdir myProject cd  myProject\navalon --init # Edit .inventory.toml and .config.toml \navalon --save   --init  and  --save  will take into account the name of the parent directory as the project name and produce two files, the \"inventory\" and \"config\". You can override this via  --root . See  --help  for details.   See  Project Inventory API  for details on how to manage your  .inventory.toml  file.  See  Project Configuration API  for details on how to manage your  .config.toml  file.",
            "title": "Create your first project"
        },
        {
            "location": "/2.0/tutorials/#create-your-second-project",
            "text": "Once you've tailored the configuration and inventory to your liking, you can re-use them for future projects.   Copy your  .config.toml  and  .inventory.toml  files from your first project.  Run the  --save  command   For example  \n   \n     cmd \n   \n   \n     bash \n      mkdir  mySecondProject cd  mySecondProject copy  ../myProject/.* ./\navalon --save    mkdir mySecondProject cd  mySecondProject\ncp ../myProject/.* ./\navalon --save   The  --init  command is used to write a generic configuration and inventory to your current working directory. If you already have some, it isn't necessary.",
            "title": "Create your second project"
        },
        {
            "location": "/2.0/tutorials/#create-your-first-asset",
            "text": "With a project up and running, how do you actually go about creating assets?  cd  myproject\navalon --load # Edit .inventory.toml \navalon --save  With  --load , the  .inventory.toml  is written to your current working directory, ready for you to edit. Here's an example entry into the  .inventory.toml .  [[assets]]  name   =   \"Batman\"  label   =   \"The Batman\"  # (Optional) Nicer name  group   =   \"Character\"  # (Optional) Visual grouping  icon   =   \"gear\"  # (Optional) Icon from FontAwesome   With the changes saved, you'll find the new asset in the Launcher.   Load project by name  Normally, the project name is derived from the current working directory. You may also pass a project name to the  --load  argument, e.g.  --load myproject    List available projects  When loading a project for the first time, you can list available in the Avalon database via  avalon   --ls",
            "title": "Create your first asset"
        },
        {
            "location": "/2.0/reference/",
            "text": "Reference\n\n\nThis section covers high-level aspects of Avalon in an information-oriented fashion.\n\n\n\n\nLooking for API reference?\n\n\nSee the \nauto-generated documentation\n for the Avalon API\n\n\n\n\n\n\n\n\nContent Life Cycle\n\n\nData in Avalon is either persistent or in transit. Persistent data resides in either a file-system or database, whereas data in transit is in one of three states.\n\n\n\n\n\n\nNote\n\n\nFor each state, there is an \nAPI\n for developers and at least one \nGUI\n for users.\n\n\n\n\n\n\nCreate\n\n\nCreation is the process of introducing new data into a project and is divided into two parts; asset and subset creation.\n\n\nAssets\n are abstract representations of the data used throughout a project - such as sequences, shots, characters and props - whereas \nSubsets\n represents data \nper asset\n - such as geometry, textures or rigs.\n\n\nAsset and subset creation is governed by the \nProject Inventory API\n and \nCreator API\n respectively via one or more plug-ins associated to named \"families\" of data, such as \nmodel\n, \nlook\n or \nrender\n.\n\n\n\n\n\n\nAssets are created via the \nProject Inventory API\n and subsets are generally created via the use of a Digital Content Creation package, such as Autodesk Maya or The Foundry Nuke.\n\n\nAPI Example\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\nclass\n \nCreateModel\n(\napi\n.\nCreator\n):\n\n    \n\"\"\"Polygonal geometry for animation\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Create Avalon Model\"\n\n    \nname\n \n=\n \n\"modelDefault\"\n\n    \nfamily\n \n=\n \n\"avalon.model\"\n\n\n\n\n\nMore information\n\n\n\n\nApplication Programming Interface\n\n\nGraphical User Interface\n\n\n\n\n\n\n\n\nImport\n\n\nImport is the process of parsing persistent data from disk and into the memory of a running application.\n\n\nDue to data being either localised or referenced, import is referred to as \nloading\n, a process governed by the \nLoading API\n through one or more plug-ins associated to named families of data.\n\n\nAPI Example\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\nclass\n \nLoadModel\n(\napi\n.\nLoader\n):\n\n    \n\"\"\"Load data of family avalon.model\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Load Avalon Model\"\n\n    \nfamilies\n \n=\n \n[\n\"avalon.model\"\n]\n\n    \nrepresentations\n \n=\n \n[\n\"ma\"\n]\n\n\n    \ndef\n \nprocess\n(\nself\n,\n \nname\n,\n \nnamespace\n,\n \ncontext\n):\n\n        \nfrom\n \nmaya\n \nimport\n \ncmds\n\n        \nfrom\n \navalon\n \nimport\n \nmaya\n\n\n        \nwith\n \nmaya\n.\nmaintained_selection\n():\n\n            \nnodes\n \n=\n \ncmds\n.\nfile\n(\nself\n.\nfname\n)\n\n\n        \nself\n[:]\n \n=\n \nnodes\n\n\n\n\n\nMore information\n\n\n\n\nApplication Programming Interface\n\n\nGraphical User Interface\n\n\n\n\n\n\n\n\n\n\nExport\n\n\nExport is the process of transforming in-memory data native to an application into something that can persist on disk. During export, data is funneled through a validation mechanism that check for consistency. Because of this additional mechanism, export is referred to as \npublishing\n.\n\n\nThe manner in which data is validated and written is governed by a series of plug-ins, orchestrated by the \nPublishing API\n and associated to families of data.\n\n\nAPI Example\n\n\nfrom\n \npyblish\n \nimport\n \napi\n\n\n\nclass\n \nExtractAvalonModel\n(\napi\n.\nInstancePlugin\n):\n\n    \n\"\"\"Produce a stripped down Maya file from instance\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Extract Avalon Model\"\n\n    \norder\n \n=\n \napi\n.\nExtractorOrder\n\n    \nhosts\n \n=\n \n[\n\"maya\"\n]\n\n    \nfamilies\n \n=\n \n[\n\"avalon.model\"\n]\n\n\n    \ndef\n \nprocess\n(\nself\n,\n \ninstance\n):\n\n        \nfrom\n \nmaya\n \nimport\n \ncmds\n\n        \nfrom\n \navalon\n \nimport\n \nmaya\n\n\n        \nwith\n \nmaya\n.\nmaintained_selection\n(),\n \nmaya\n.\nwithout_extension\n():\n\n            \ncmds\n.\nselect\n(\ninstance\n,\n \nnoExpand\n=\nTrue\n)\n\n            \ncmds\n.\nfile\n(\npath\n,\n \ntyp\n=\n\"mayaAscii\"\n,\n \nexportSelected\n=\nTrue\n)\n\n\n\n\n\nMore information\n\n\n\n\nApplication Programming Interface\n\n\nGraphical User Interface\n\n\n\n\n\n\n\n\nPersist\n\n\nOnce exported, data resides in one or two locations - as files in a file-system, or as documents in a database. The exact location within the file-system is governed by the \nProject Configuration API\n via path \"templates\" - a string encoded with placeholder variables associated to the various objects in the \nobject model\n, customisable per-project.\n\n\n\n\nExample\n\n\n{\n\n    \n\"work\"\n:\n \n\"{root}/{project}/{asset}/work/{task}/{user}/{app}\"\n,\n\n    \n\"publish\"\n:\n \n\"{root}/{project}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\"\n\n\n}\n\n\n\n\n\n\n\n\n\nObject Model\n\n\nWherever data is stored, it is stored as a hierarchy of increasingly granular objects, representative of the division of labour in each project created through Avalon.\n\n\n\n\n\n\n\n\nAssets\n represents the most course grained division of labour and is typically used for shots and builds, e.g. the 6\nth\n shot and the hero character.\n\n\nEach asset contain one or more \nSubsets\n which are typically used for individual models and animation caches for a build or shot.\n\n\nEach subset contain one or more \nVersions\n which are immutable sources of data containing the final element of the object model; the \nRepresentation\n.\n\n\nRepresentations are the storage method of a version, such as a .png thumbnail, an .obj geometry file or .mp4 turntable of a hero model. Both of which represents the same set of data in three different ways.\n\n\nEach object containing a series of members defined by an explicit schema, enforced via \njsonschema\n and organised hierarchically with the former containing the latter.\n\n\nRead more\n\n\n\n\nRead about schemas in the \nDatabase section\n below.\n\n\n\n\nMetadata\n\n\nEvery object in the model contains a dictionary member called \n.data\n.\n\n\nThe conceptual difference between top-level members and members of \n.data\n is that top-level members can be assumed to exist in every application, whereas members of \n.data\n are optional. \n\n\nOptional members facilitate flexible code at the cost of having more of it and therefore more to maintain.\n\n\n\n\n\n\n\n\nDatabase\n\n\nAvalon stores data in two separate locations, on disk and in a database. The separation is made due to performance and search capabilities offered by databases.\n\n\nMongoDB was chosen due to the inherent simplicity and similarity to Python's built-in dictionary type, and performance great enough to enable graphical user interfaces to be built without asynchronousity in mind.\n\n\nInside of MongoDB, data is stored as Collections containing many Documents. In Avalon, each Collection represents a project and documents make up the \nObject Model\n. \n\n\n\n\nAsset\n\n\nSubset\n\n\nVersion\n\n\nRepresentation\n\n\n\n\nThese form a hierarchy, where each contain the latter. Assets make up the top-level object within a project, and can represent anything from characters, shots to levels and more.\n\n\n\n\n\n\n\n\nAsset\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHulk\n\n\nA bulky fellow\n\n\n\n\n\n\nBruce\n\n\nThe hero of the film\n\n\n\n\n\n\n1000\n\n\nFirst shot\n\n\n\n\n\n\n1200\n\n\nSecond shot\n\n\n\n\n\n\n\n\nSubsets is the asset broken down into smaller sets of information, such as a rig or a model.\n\n\n\n\n\n\n\n\nSubset\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodel\n\n\nHulk's model\n\n\n\n\n\n\nrig\n\n\nHulk's rig\n\n\n\n\n\n\nlookdev\n\n\nHulk's look\n\n\n\n\n\n\nanimation\n\n\nHulk's point cached geometry\n\n\n\n\n\n\n\n\nA subset must have a least one Version, which is typically immutable.\n\n\n\n\n\n\n\n\nVersion\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nv001\n\n\nInitial version\n\n\n\n\n\n\nv002\n\n\nFixed whole in mesh\n\n\n\n\n\n\nv003\n\n\nIncreased the size of pecs\n\n\n\n\n\n\n\n\nFinally, in each version there is at least one Representation; typically a file or sequence of files.\n\n\n\n\n\n\n\n\nRepresentation\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nma\n\n\nMaya rig\n\n\n\n\n\n\nmov\n\n\nTurntable\n\n\n\n\n\n\nabc\n\n\nStill frame of mesh used in rig\n\n\n\n\n\n\n\n\nRead more about the kinds of objects in \nSchemas\n below.\n\n\n\n\nSchemas\n\n\nAll data within the database and on disk follow a strict layout, known as a \"schema\".\n\n\nProject\n\n\nA project is a top-level object that cannot be contained elsewhere, but contains everything else.\n\n\n\nproject-2.0.json\n\n\n\n{\n\n    \n\"config\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"data\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"name\"\n:\n \n\"Name of directory\"\n,\n\n    \n\"parent\"\n:\n \n\"Unique identifier to parent document\"\n,\n\n    \n\"schema\"\n:\n \n\"Schema identifier for payload\"\n,\n\n    \n\"type\"\n:\n \n\"The type of document\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"config\"\n:\n \n{\n\n        \n\"apps\"\n:\n \n[\n\n            \n{\n\n                \n\"label\"\n:\n \n\"Autodesk Maya 2016\"\n,\n\n                \n\"name\"\n:\n \n\"maya2016\"\n\n            \n},\n\n            \n{\n\n                \n\"label\"\n:\n \n\"The Foundry Nuke 10.0\"\n,\n\n                \n\"name\"\n:\n \n\"nuke10\"\n\n            \n}\n\n        \n],\n\n        \n\"schema\"\n:\n \n\"avalon-core:config-1.0\"\n,\n\n        \n\"tasks\"\n:\n \n[\n\n            \n{\n\n                \n\"name\"\n:\n \n\"model\"\n\n            \n},\n\n            \n{\n\n                \n\"name\"\n:\n \n\"render\"\n\n            \n},\n\n            \n{\n\n                \n\"name\"\n:\n \n\"animate\"\n\n            \n},\n\n            \n{\n\n                \n\"name\"\n:\n \n\"rig\"\n\n            \n},\n\n            \n{\n\n                \n\"name\"\n:\n \n\"lookdev\"\n\n            \n},\n\n            \n{\n\n                \n\"name\"\n:\n \n\"layout\"\n\n            \n}\n\n        \n],\n\n        \n\"template\"\n:\n \n{\n\n            \n\"publish\"\n:\n \n\"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\"\n,\n\n            \n\"work\"\n:\n \n\"{root}/{project}/{silo}/{asset}/work/{task}/{app}\"\n\n        \n}\n\n    \n},\n\n    \n\"data\"\n:\n \n{\n\n        \n\"fps\"\n:\n \n24\n,\n\n        \n\"height\"\n:\n \n1080\n,\n\n        \n\"width\"\n:\n \n1920\n\n    \n},\n\n    \n\"name\"\n:\n \n\"hulk\"\n,\n\n    \n\"parent\"\n:\n \n\"592c33475f8c1b064c4d1696\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:project-2.0\"\n,\n\n    \n\"type\"\n:\n \n\"project\"\n\n\n}\n\n\n\n\n\n\n\nAsset\n\n\nA part of a project, such as a Character or Shot.\n\n\n\nasset-2.0.json\n\n\n\n{\n\n    \n\"data\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"name\"\n:\n \n\"Name of asset\"\n,\n\n    \n\"parent\"\n:\n \n\"Unique identifier to parent document\"\n,\n\n    \n\"schema\"\n:\n \n\"Schema identifier for payload\"\n,\n\n    \n\"silo\"\n:\n \n\"Group or container of asset\"\n,\n\n    \n\"type\"\n:\n \n\"The type of document\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"data\"\n:\n \n{\n\n        \n\"key\"\n:\n \n\"value\"\n\n    \n},\n\n    \n\"name\"\n:\n \n\"Bruce\"\n,\n\n    \n\"parent\"\n:\n \n\"592c33475f8c1b064c4d1696\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:asset-2.0\"\n,\n\n    \n\"silo\"\n:\n \n\"assets\"\n,\n\n    \n\"type\"\n:\n \n\"asset\"\n\n\n}\n\n\n\n\n\n\n\nSubset\n\n\nA part of an \nAsset\n, such as a model or a rig.\n\n\n\nsubset-2.0.json\n\n\n\n{\n\n    \n\"data\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"name\"\n:\n \n\"Name of directory\"\n,\n\n    \n\"parent\"\n:\n \n\"Unique identifier to parent document\"\n,\n\n    \n\"schema\"\n:\n \n\"The schema associated with this document\"\n,\n\n    \n\"type\"\n:\n \n\"The type of document\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"data\"\n:\n \n{\n\n        \n\"frameEnd\"\n:\n \n1201\n,\n\n        \n\"frameStart\"\n:\n \n1000\n\n    \n},\n\n    \n\"name\"\n:\n \n\"shot01\"\n,\n\n    \n\"parent\"\n:\n \n\"592c33475f8c1b064c4d1696\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:subset-2.0\"\n,\n\n    \n\"type\"\n:\n \n\"subset\"\n\n\n}\n\n\n\n\n\n\n\nVersion\n\n\nAn immutable iteration of a \nSubset\n.\n\n\nVersions are immutable, in that they never change once made. This is in stark contrast to mutable versions which is when one version may be \"updated\" such that the same file now contains new information.\n\n\n\nversion-2.0.json\n\n\n\n{\n\n    \n\"data\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"locations\"\n:\n \n\"Where on the planet this version can be found.\"\n,\n\n    \n\"name\"\n:\n \n\"Number of version\"\n,\n\n    \n\"parent\"\n:\n \n\"Unique identifier to parent document\"\n,\n\n    \n\"schema\"\n:\n \n\"The schema associated with this document\"\n,\n\n    \n\"type\"\n:\n \n\"The type of document\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"data\"\n:\n \n{\n\n        \n\"author\"\n:\n \n\"marcus\"\n,\n\n        \n\"families\"\n:\n \n[\n\n            \n\"avalon.model\"\n\n        \n],\n\n        \n\"source\"\n:\n \n\"{root}/f02_prod/assets/BubbleWitch/work/modeling/marcus/maya/scenes/model_v001.ma\"\n,\n\n        \n\"time\"\n:\n \n\"20170510T090203Z\"\n\n    \n},\n\n    \n\"locations\"\n:\n \n[\n\n        \n\"data.avalon.com\"\n\n    \n],\n\n    \n\"name\"\n:\n \n12\n,\n\n    \n\"parent\"\n:\n \n\"592c33475f8c1b064c4d1696\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:version-2.0\"\n,\n\n    \n\"type\"\n:\n \n\"version\"\n\n\n}\n\n\n\n\n\n\n\nRepresentation\n\n\nOne of many representations of a \nVersion\n.\n\n\nThink of a representation as one way of storing the same set of data on disk. For example, an image may be stored as both PNG and JPEG. Different files, same data. It could also be stored as a description. \n\"A picture of my computer.\"\n Much less information is ultimately stored, but it is nonetheless the exact same original data in a different (albeit lossy) representation. The image could also be represented by a feeling (warm, mystical) or a spoken word (muah!).\n\n\nRepresentations are very powerful and lie at the heart of assets that are more than just a single file.\n\n\nAs a practical example, a Look is stored as both an MA scene file and a JSON. The JSON stores the shader relationships, whereas the MA file stores the actual shaders. Same data, different representations.\n\n\n\nrepresentation-2.0.json\n\n\n\n{\n\n    \n\"context\"\n:\n \n\"Summary of the context to which this representation belong.\"\n,\n\n    \n\"data\"\n:\n \n\"Document metadata\"\n,\n\n    \n\"dependencies\"\n:\n \n\"Other representation that this representation depends on\"\n,\n\n    \n\"name\"\n:\n \n\"Name of representation\"\n,\n\n    \n\"parent\"\n:\n \n\"Unique identifier to parent document\"\n,\n\n    \n\"schema\"\n:\n \n\"Schema identifier for payload\"\n,\n\n    \n\"type\"\n:\n \n\"The type of document\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"context\"\n:\n \n{\n\n        \n\"asset\"\n:\n \n\"Bruce\"\n,\n\n        \n\"project\"\n:\n \n\"hulk\"\n,\n\n        \n\"representation\"\n:\n \n\"ma\"\n,\n\n        \n\"silo\"\n:\n \n\"assets\"\n,\n\n        \n\"subset\"\n:\n \n\"rigDefault\"\n,\n\n        \n\"version\"\n:\n \n12\n\n    \n},\n\n    \n\"data\"\n:\n \n{\n\n        \n\"label\"\n:\n \n\"Alembic\"\n\n    \n},\n\n    \n\"dependencies\"\n:\n \n[\n\n        \n\"592d547a5f8c1b388093c145\"\n\n    \n],\n\n    \n\"name\"\n:\n \n\"abc\"\n,\n\n    \n\"parent\"\n:\n \n\"592c33475f8c1b064c4d1696\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:representation-2.0\"\n,\n\n    \n\"type\"\n:\n \n\"representation\"\n\n\n}\n\n\n\n\n\n\n\nContainer\n\n\nAn imported \nVersion\n, as yielded from \napi\n.\nregistered_host\n().\nls\n()\n.\n\n\n\ncontainer-2.0.json\n\n\n\n{\n\n    \n\"id\"\n:\n \n\"Identifier for finding object in host\"\n,\n\n    \n\"loader\"\n:\n \n\"Name of loader plug-in used to produce this container\"\n,\n\n    \n\"name\"\n:\n \n\"Internal object name of container in application\"\n,\n\n    \n\"namespace\"\n:\n \n\"Internal namespace of container in application\"\n,\n\n    \n\"objectName\"\n:\n \n\"Name of internal object, such as the objectSet in Maya.\"\n,\n\n    \n\"representation\"\n:\n \n\"Unique id of representation in database\"\n,\n\n    \n\"schema\"\n:\n \n\"Schema identifier for payload\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"id\"\n:\n \n\"pyblish.avalon.container\"\n,\n\n    \n\"loader\"\n:\n \n\"ModelLoader\"\n,\n\n    \n\"name\"\n:\n \n\"modelDefault_01\"\n,\n\n    \n\"namespace\"\n:\n \n\"Bruce_\"\n,\n\n    \n\"objectName\"\n:\n \n\"Bruce_:rigDefault_CON\"\n,\n\n    \n\"representation\"\n:\n \n\"59523f355f8c1b5f6c5e8348\"\n,\n\n    \n\"schema\"\n:\n \n\"avalon-core:container-2.0\"\n\n\n}\n\n\n\n\n\n\n\n\n\nSoftware\n\n\nAvalon assumes content is created within an application of some kind and manages the execution of each application via \nLauncher\n.\n\n\nApps\n\n\nLauncher\n is responsible for launching \"apps\", such as Maya. \"App\" is the term used for a pre-configured application in Avalon.\n\n\nProblem\n\n\nIt could call on \nc\n:\n\\\nProgram\n \nFiles\n\\\nAutodesk\n\\\nMaya2017\n\\\nbin\n\\\nmaya\n.\nexe\n directly, but doing so is problematic because..\n\n\n\n\nIt assumes a particular operating system\n\n\nIt assumes a particular installation directory\n\n\nIt assumes a particular app is what you want for your project(s)\n\n\nIt assumes no customisation of environment prior to launch\n\n\n\n\nSolution\n\n\nThe \nProject Executable API\n addresses this by splitting the problem it into three independently configurable parts.\n\n\n\n\nApps are assumed to be available on your \nPATH\n, e.g. \nmaya\n.\nsh\n or \nmaya\n.\nbat\n\n\nConfiguration is performed per application in an individual configuration file, e.g. \nmaya\n.\ntoml\n\n\nApps are associated per project, e.g. Hulk uses Maya and Nuke.\n\n\n\n\n\n\n\n\n\n\nLibrary API\n\n\nPublic members of \navalon\n.\napi\n. See \nAPI Documentation\n for full details.\n\n\n\n\n\n\n\n\nMember\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\nInstall \nhost\n into the running Python session.\n\n\n\n\n\n\nuninstall\n\n\nUndo all of what \ninstall\n()\n did\n\n\n\n\n\n\nschema\n\n\nWrapper around :mod:\njsonschema\n\n\n\n\n\n\nLoader\n\n\nLoad representation into host application\n\n\n\n\n\n\nCreator\n\n\nDetermine how assets are created\n\n\n\n\n\n\nAction\n\n\nA custom action available\n\n\n\n\n\n\nInventoryAction\n\n\nA custom action for the scene inventory tool\n\n\n\n\n\n\nApplication\n\n\nDefault application launcher\n\n\n\n\n\n\ndiscover\n\n\nFind and return subclasses of \nsuperclass\n\n\n\n\n\n\nSession\n\n\ndict() -> new empty dictionary\n\n\n\n\n\n\nsession\n\n\ndict() -> new empty dictionary\n\n\n\n\n\n\non\n\n\nCall \ncallback\n on \nevent\n\n\n\n\n\n\nafter\n\n\nConvenience to \non\n()\n for after-events\n\n\n\n\n\n\nbefore\n\n\nConvenience to \non\n()\n for before-events\n\n\n\n\n\n\nemit\n\n\nTrigger an \nevent\n\n\n\n\n\n\npublish\n\n\nShorthand to publish from within host\n\n\n\n\n\n\ncreate\n\n\nCreate a new instance\n\n\n\n\n\n\nload\n\n\nUse Loader to load a representation.\n\n\n\n\n\n\nupdate\n\n\nUpdate a container\n\n\n\n\n\n\nswitch\n\n\nSwitch a container to representation\n\n\n\n\n\n\nremove\n\n\nRemove a container\n\n\n\n\n\n\ndata\n\n\ndict() -> new empty dictionary\n\n\n\n\n\n\nupdate_current_task\n\n\nUpdate active Session to a new task work area.\n\n\n\n\n\n\nget_representation_path\n\n\nGet filename from representation document\n\n\n\n\n\n\nloaders_from_representation\n\n\nReturn all compatible loaders for a representation.\n\n\n\n\n\n\nregister_host\n\n\nRegister a new host for the current process\n\n\n\n\n\n\nregister_plugin_path\n\n\nRegister a directory of one or more plug-ins\n\n\n\n\n\n\nregister_plugin\n\n\nRegister an individual \nobj\n of type \nsuperclass\n\n\n\n\n\n\nregister_root\n\n\nRegister currently active root\n\n\n\n\n\n\nregistered_root\n\n\nReturn currently registered root\n\n\n\n\n\n\nregistered_plugin_paths\n\n\nReturn all currently registered plug-in paths\n\n\n\n\n\n\nregistered_host\n\n\nReturn currently registered host\n\n\n\n\n\n\nregistered_config\n\n\nReturn currently registered config\n\n\n\n\n\n\nderegister_plugin\n\n\nOppsite of \nregister_plugin\n()\n\n\n\n\n\n\nderegister_plugin_path\n\n\nOppsite of \nregister_plugin_path\n()\n\n\n\n\n\n\nlogger\n\n\n\n\n\n\n\n\ntime\n\n\nReturn file-system safe string of current date and time\n\n\n\n\n\n\n\n\n\n\n\n\nHost API\n\n\nA host must implement the following members.\n\n\n\n\n\n\n\n\nMember\n\n\nReturns\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nls\n\n\ngenerator\n\n\nList loaded assets\n\n\n\n\n\n\ncreate\n\n\nstr\n\n\nBuild fixture for outgoing data (see \ninstance\n), returns instance.\n\n\n\n\n\n\nload\n\n\nNone\n\n\nImport external data into \ncontainer\n\n\n\n\n\n\nupdate\n\n\nNone\n\n\nUpdate an existing container\n\n\n\n\n\n\nremove\n\n\nNone\n\n\nRemove an existing container\n\n\n\n\n\n\n\n\n\n\nInformation hierarchy\n\n\nImported data is stored in a \ncontainer\n. A container hosts a loaded asset along with metadata used to associate assets that use other assets, such as a Wheel asset used in a Car asset.\n\n\n\n\nId\n\n\nInternally, Pyblish instances and containers are distinguished from native content via an \"id\". For example, in Maya, the \nid\n is a user-defined attribute.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\npyblish\n.\navalon\n.\ncontainer\n\n\nUnit of incoming data\n\n\n...:\nmodel_GRP\n, \n...:\nrig_GRP\n\n\n\n\n\n\npyblish\n.\navalon\n.\ninstance\n\n\nUnit of outgoing data\n\n\nStrange_model_default\n\n\n\n\n\n\n\n\n\n\n\n\nProject Inventory API\n\n\nThe inventory contains all ASSETs of a project, including metadata.\n\n\n\n\nIcon Database\n\n\n\n\n.inventory.toml\n\n\n# Mandatory, do not touch\n\n\nschema\n \n=\n \n\"avalon-core:inventory-1.0\"\n\n\n\n# Project metadata\n\n\nlabel\n \n=\n \n\"The Hulk\"\n\n\nfps\n \n=\n \n24\n\n\nresolution_width\n \n=\n \n1920\n\n\nresolution_height\n \n=\n \n1080\n\n\n\n# Available assets\n\n\n[[assets]]\n\n\nname\n \n=\n \n\"Batman\"\n\n\n\n[[assets]]\n\n\nname\n \n=\n \n\"Bruce\"\n\n\nlabel\n \n=\n \n\"Bruce Wayne\"  # (Optional) Nicer name\n\n\ngroup\n \n=\n \n\"Character\"  # (Optional) Visual grouping\n\n\nicon\n \n=\n \n\"gear\"  # (Optional) Icon from FontAwesome\n\n\n\n[[assets]]\n\n\nname\n \n=\n \n\"Camera\"\n\n\n\n# Available shots\n\n\n[[film]]\n\n\nname\n \n=\n \n\"1000\"\n\n\nedit_in\n \n=\n \n1000\n\n\nedit_out\n \n=\n \n1202\n\n\n\n[[film]]\n\n\nname\n \n=\n \n\"1200\"\n\n\nedit_in\n \n=\n \n1000  # Optional metadata per shot\n\n\nedit_out\n \n=\n \n1143\n\n\n\n\n\nThe above is an example of an \"inventory\". A complete snapshot of all available assts within a given project, along with optional metadata.\n\n\n\n\n\n\nProject Configuration API\n\n\nThe project configuration contains the applications and tasks available within a given project, along with the template used to create directories.\n\n\n.config.toml\n\n\n# Mandatory, do not touch\n\n\nschema\n \n=\n \n\"avalon-core:config-1.0\"\n\n\n\n# Available tasks to choose from.\n\n\n[[tasks]]\n\n\nname\n \n=\n \n\"modeling\"\n\n\nlabel\n \n=\n \n\"Character Modeling\"\n\n\nicon\n \n=\n \n\"video-camera\"\n\n\n\n[[tasks]]\n\n\nname\n \n=\n \n\"animation\"\n\n\n\n# Available applications to choose from, the name references\n\n\n# the executable API (see below)\n\n\n[[apps]]\n\n\nname\n \n=\n \n\"maya2016\"\n\n\nlabel\n \n=\n \n\"Autodesk Maya 2016\"\n\n\n\n[[apps]]\n\n\nname\n \n=\n \n\"python\"\n\n\nlabel\n \n=\n \n\"Python 3.6\"\n\n\nargs\n \n=\n \n[\"-u\", \"-c\", \"print('Something nice')\"]\n\n\n\n# Directory layouts for this project.\n\n\n[template]\n\n\nwork\n \n=\n \n\"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\"\n\n\npublish\n \n=\n \n\"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\"\n\n\n\n\n\nThe directory layout have the following members available.\n\n\n\n\n\n\n\n\nMember\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n{\napp\n}\n\n\nstr\n\n\nThe current application directory name, defined in Executable API\n\n\n\n\n\n\n{\ntask\n}\n\n\nstr\n\n\nName of the current task\n\n\n\n\n\n\n{\nuser\n}\n\n\nstr\n\n\nCurrently logged on user (provided by \ngetpass\n.\ngetuser\n()\n)\n\n\n\n\n\n\n{\nroot\n}\n\n\nstr\n\n\nAbsolute path to root directory, e.g. \nm\n:\n\\\nf01_project\n\n\n\n\n\n\n{\nproject\n}\n\n\nstr\n\n\nName of current project\n\n\n\n\n\n\n{\nsilo\n}\n\n\nstr\n\n\nName of silo, e.g. \nassets\n\n\n\n\n\n\n{\nasset\n}\n\n\nstr\n\n\nName of asset, e.g. \nBruce\n\n\n\n\n\n\n{\nsubset\n}\n\n\nstr\n\n\nName of subset, e.g. \nmodelDefault\n\n\n\n\n\n\n{\nversion\n}\n\n\nint\n\n\nNumber of version, e.g. \n1\n\n\n\n\n\n\n{\nrepresentation\n}\n\n\nstr\n\n\nName of representation, e.g. \nma\n\n\n\n\n\n\n\n\n\n\n\n\nProject Executable API\n\n\nEvery executable must have an associated Application Definition file which looks like this.\n\n\nmaya2016.toml\n\n\n# Required header, do not touch.\n\n\nschema\n \n=\n \n\"avalon-core:application-1.0\"\n\n\n\n# Name of the created directory, available in the \n\n\n# `template` of the Configuration API\n\n\napplication_dir\n \n=\n \n\"maya\"\n\n\n\n# These directories will be created under the\n\n\n# given application directory\n\n\ndefault_dirs\n \n=\n \n[\n\n\n    \"scenes\",\n\n\n    \"data\",\n\n\n    \"renderData/shaders\",\n\n\n    \"images\"\n\n\n]\n\n\n\n# Name displayed in GUIs\n\n\nlabel\n \n=\n \n\"Autodesk Maya 2016x64\"\n\n\n\n# Arguments passed to the executable on launch\n\n\narguments\n \n=\n \n[ \"-proj\", \"{AVALON_WORKDIR}\",]\n\n\n\n# Name of the executable on the local computer.\n\n\n# This name must be available via the users `PATH`.\n\n\n# That is, the user must be able to type this into\n\n\n# the terminal to launch said application.\n\n\nexecutable\n \n=\n \n\"maya2016\"\n\n\ndescription\n \n=\n \n\"\"\n\n\n\n# Files copied into the application directory on launch\n\n\n[copy]\n\n\n\"{AVALON_CORE}/res/workspace.mel\"\n \n=\n \n\"workspace.mel\"\n\n\n\n# The environment variables overrides any previously set\n\n\n# variables from the parent process.\n\n\n[environment]\n\n\nMAYA_DISABLE_CLIC_IPM\n \n=\n \n\"Yes\"  # Disable the AdSSO process\n\n\nMAYA_DISABLE_CIP\n \n=\n \n\"Yes\"  # Shorten time to boot\n\n\nMAYA_DISABLE_CER\n \n=\n \n\"Yes\"\n\n\nPYTHONPATH\n \n=\n \n[\n\n\n    \"{PYBLISH_MAYA}/pyblish_maya/pythonpath\",\n\n\n    \"{AVALON_CORE}/avalon/maya/pythonpath\",\n\n\n    \"{PYTHONPATH}\"\n\n\n]\n\n\n\n\n\n\n\nProject Template API\n\n\nThe vast majority of data managed by Avalon is stored as files on disk, and every file has a path. The path is an integral part of any production and requires fine-grained control.\n\n\nAvalon provides this control in the form of \ntemplates\n.\n\n\nA template is a string of \n{\nplaceholders\n}\n, each placeholder representing some data.\n\n\ntemplate\n \n=\n \n\"{project}/{asset}/myfile_v{version:0>3}.ma\"\n\n\n\n\n\nThe keywords within the \n{}\n are known as \nplaceholders\n and may be dynamically replaced at run-time by your code.\n\n\nExample\n\n\nOn saving a file, this template could be used to construct a path.\n\n\ntemplate\n \n=\n \n\"{project}/{asset}/myfile_{version:0>3}.ma\"\n\n\nfname\n \n=\n \ntemplate\n.\nformat\n(\n\n    \nproject\n=\n\"hulk\"\n,\n\n    \nasset\n=\n\"bruce\"\n,\n\n    \nversion\n=\n13\n\n\n)\n\n\nprint\n(\nfname\n)\n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \n\n          \n\n\nhulk/bruce/myfile_013.ma\n          \n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\nProvided that pass the same data, the template itself can vary, whilst leaving your code intact.\n\n\ntemplate\n \n=\n \n\"c:/assets/{asset}/{project}/myfile_version{version:0>2}.mb\"\n\n\n\n\n\nViola, a drastically different directory layout, with identical data and code to process it. Notice how this templates includes reference to \nc\n:\n\\\n which not only asserts a particular operating system (Windows) but also leaves no room for an alternative \"root\". See \nRoot Template\n below for an example of how to overcome this limitation.\n\n\nThis is how Avalon works.\n\n\nIn this way, you can establish \nconvention\n at a high-level whilst still remaning \nspecific\n in places where you need to either read from or write to disk. More importantly, this is the aspect which allows Avalon to not make assumptions about your directory layout; it is up to you to write this template.\n\n\nHaving said that, though Avalon doesn't make assumptions about \nwhere\n data is written, it \ndoes\n make assumptions on the types of data written - referred to as the Avalon Object Model - and your directory layout must accommodate for these types at minimum.\n\n\n\n\nSee \nObject Model\n for a high-level overview of these types\n\n\n\n\nFor any project, Avalon assumes a \nwork\n template to be available in your \nProject Configuration\n. This template is used to generate the initial directory layout for your work-in-progress files.\n\n\nThe layout and ordering of placeholders in this template is within your control, and these are the ones available to you.\n\n\n{\n\n    \n\"root\"\n:\n \n\"Currently registered root, e.g. 'c:/projects'\"\n,\n\n    \n\"project\"\n:\n \n\"Current project, e.g. 'hulk'\"\n,\n\n    \n\"silo\"\n:\n \n\"Current silo, e.g. 'assets', 'film', 'episodes'\"\n,\n\n    \n\"asset\"\n:\n \n\"Current asset, e.g. 'Bruce'\"\n,\n\n    \n\"task\"\n:\n \n\"Current task\"\n,\n\n    \n\"app\"\n:\n \n\"Current app, e.g. 'maya2019'\"\n,\n\n    \n\"user\"\n:\n \n\"Current user, e.g. 'rick'\"\n\n\n}\n\n\n\n\n\nHere's an example of a \nwork\n template.\n\n\ntemplate\n \n=\n \n\"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\"\n\n\n\n\n\n\n\nSee \nProject Configuration API\n for more.\n\n\n\n\nTemplate Access\n\n\nTemplates are generally stored in your \nproject configuration\n.\n\n\n# Untested\n\n\nfrom\n \navalon\n \nimport\n \nio\n\n\nproject\n \n=\n \nio\n.\nfind_one\n({\n\"type\"\n:\n \n\"project\"\n})\n\n\ntemplate\n \n=\n \nproject\n[\n\"config\"\n][\n\"template\"\n][\n\"work\"\n]\n\n\n\n\n\nRoot Template\n\n\nEvery path has a \"root\"; the first part of a path.\n\n\nc\n:\n\\\n\n\n/\nroot\n\n\n/\nprojects\n/\n\n\n\n\n\nWhen a template includes a root explicitly, like any of the above, then a template is limited to (1) a particular platform and (2) a particular mount on that platform.\n\n\nFor example, if your studio is exclusively on Windows and all share the drive \nz\n:\n\\\n, then it is safe to embed this into your template.\n\n\ntemplate\n \n=\n \n\"z:/projects/{project}/{asset}/...\"\n\n\n\n\n\nHowever, when there are multiple operating systems and/or multiple mount points - e.g. \nz\n:\n\\\n on some machines and and \nx\n:\n\\\n on others - then the above template no longer works.\n\n\nTo work around this, Avalon provides the idea of a \"root\" directory.\n\n\n# Windows box, from our London branch\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\napi\n.\nregister_root\n(\nr\n\"c:\\projects\"\n)\n\n\n\n\n\nAt run-time, a root directory is registered relative your platform and mount point, such that your template can look like..\n\n\ntemplate\n \n=\n \n\"{root}/{project}{asset}...\"\n\n\n\n\n\nSuch that, on another platform or machine, the root registration can change to account for a differing root.\n\n\n# Linux box, in LA\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\napi\n.\nregister_root\n(\n\"/mnt/projects\"\n)\n\n\n\n\n\nAs a result, your folder creation and publishing code can remain as-is, whilst assets are being read and written all over the place.\n\n\n\n\n\n\n\n\nEnvironment Variables\n\n\nAvalon uses environment variables extensively. For example, simply running an application involves two layers of information exchange.\n\n\n\n\nYour shell > Launcher\n\n\nLauncher > Application\n\n\n\n\nIn this documentation, environment variables are UPPERCASE and setting one is similar across all platforms.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\nset\n \nMY_VARIABLE\n=\nvalue\n\n\n\n\n\n\n\n\nexport\n \nMY_VARIABLE\n=\nvalue\n\n\n\n\n\n\nVariables may also be set from within Python, by altering the \nos\n.\nenviron\n dictionary.\n\n\nimport\n \nos\n\n\nos\n.\nenviron\n[\n\"MY_VARIABLE\"\n]\n \n=\n \n\"value\"\n\n\n\n\n\nAvalon Environment\n\n\nThese are all environment variables relevant in some way to Avalon.\n\n\n\nsession-1.0.json\n\n\n\n{\n\n    \n\"AVALON_APP\"\n:\n \n\"Name of application\"\n,\n\n    \n\"AVALON_ASSET\"\n:\n \n\"Name of asset\"\n,\n\n    \n\"AVALON_CONFIG\"\n:\n \n\"Name of Avalon configuration\"\n,\n\n    \n\"AVALON_CONTAINER_ID\"\n:\n \n\"Unique identifier for a loaded representation in a working file\"\n,\n\n    \n\"AVALON_DB\"\n:\n \n\"Name of database\"\n,\n\n    \n\"AVALON_DEADLINE\"\n:\n \n\"Address to Deadline\"\n,\n\n    \n\"AVALON_DEBUG\"\n:\n \n\"Enable debugging mode. Some applications may use this for e.g. extended verbosity or mock plug-ins.\"\n,\n\n    \n\"AVALON_INSTANCE_ID\"\n:\n \n\"Unique identifier for instances in a working file\"\n,\n\n    \n\"AVALON_LABEL\"\n:\n \n\"Nice name of Avalon, used in e.g. graphical user interfaces\"\n,\n\n    \n\"AVALON_MONGO\"\n:\n \n\"Address to the asset database\"\n,\n\n    \n\"AVALON_PASSWORD\"\n:\n \n\"Generic password\"\n,\n\n    \n\"AVALON_PROJECT\"\n:\n \n\"Name of project\"\n,\n\n    \n\"AVALON_PROJECTS\"\n:\n \n\"Absolute path to root of project directories\"\n,\n\n    \n\"AVALON_SENTRY\"\n:\n \n\"Address to Sentry\"\n,\n\n    \n\"AVALON_SILO\"\n:\n \n\"Name of asset group or container\"\n,\n\n    \n\"AVALON_TASK\"\n:\n \n\"Name of task\"\n,\n\n    \n\"AVALON_TIMEOUT\"\n:\n \n\"Wherever there is a need for a timeout, this is the default value.\"\n,\n\n    \n\"AVALON_UPLOAD\"\n:\n \n\"Boolean of whether to upload published material to central asset repository\"\n,\n\n    \n\"AVALON_USERNAME\"\n:\n \n\"Generic username\"\n,\n\n    \n\"AVALON_WORKDIR\"\n:\n \n\"Current working directory of a host, such as Maya's location of workspace.mel\"\n\n\n}\n\n\n\n\n\nExample\n\n\n{\n\n    \n\"AVALON_APP\"\n:\n \n\"maya2016\"\n,\n\n    \n\"AVALON_ASSET\"\n:\n \n\"Bruce\"\n,\n\n    \n\"AVALON_CONFIG\"\n:\n \n\"polly\"\n,\n\n    \n\"AVALON_CONTAINER_ID\"\n:\n \n\"avalon.container\"\n,\n\n    \n\"AVALON_DB\"\n:\n \n\"avalon\"\n,\n\n    \n\"AVALON_DEADLINE\"\n:\n \n\"http://192.168.99.101\"\n,\n\n    \n\"AVALON_DEBUG\"\n:\n \n\"True\"\n,\n\n    \n\"AVALON_INSTANCE_ID\"\n:\n \n\"avalon.instance\"\n,\n\n    \n\"AVALON_LABEL\"\n:\n \n\"Mindbender\"\n,\n\n    \n\"AVALON_MONGO\"\n:\n \n\"mongodb://localhost:27017\"\n,\n\n    \n\"AVALON_PASSWORD\"\n:\n \n\"abc123\"\n,\n\n    \n\"AVALON_PROJECT\"\n:\n \n\"Hulk\"\n,\n\n    \n\"AVALON_PROJECTS\"\n:\n \n\"/nas/projects\"\n,\n\n    \n\"AVALON_SENTRY\"\n:\n \n\"https://5b872b280de742919b115bdc8da076a5:8d278266fe764361b8fa6024af004a9c@logs.mindbender.com/2\"\n,\n\n    \n\"AVALON_SILO\"\n:\n \n\"assets\"\n,\n\n    \n\"AVALON_TASK\"\n:\n \n\"modeling\"\n,\n\n    \n\"AVALON_TIMEOUT\"\n:\n \n\"1000\"\n,\n\n    \n\"AVALON_UPLOAD\"\n:\n \n\"True\"\n,\n\n    \n\"AVALON_USERNAME\"\n:\n \n\"myself\"\n,\n\n    \n\"AVALON_WORKDIR\"\n:\n \n\"/mnt/projects/alita/assets/vector/maya\"\n\n\n}\n\n\n\n\n\n\n\nInheritance and Persistence\n\n\nSetting a variable as above only affects the current instance of the process, such as \ncmd\n.\nexe\n and \npython\n. That's because variables are \ninherited\n.\n\n\nInheritance in this context means that any process launched from a parent process will contain a duplicate of the parent environment, and no change you make to the environment of this child process will affect the parent process.\n\n\n\n  \n\n    \ncmd\n\n  \n\n  \n\n    \nbash\n\n  \n\n\n\n\n\n\n\nset\n \nMY_VARIABLE\n=\nvalue\ncmd\n\necho\n \n%MY_VARIABLE%\n\n\n:\n: value\n\n\nset\n \nCHILD_VARIABLE\n=\n1\n\necho\n \n%CHILD_VARIABLE%\n\n\n:\n: 1\n\n\nexit\n\n\necho\n \n%CHILD_VARIABLE%\n\n\n:\n: %CHILD_VARIABLE%\n\n\n\n\n\n\n\n\n\nexport\n \nMY_VARIABLE\n=\nvalue\ncmd\n\necho\n \n$MY_VARIABLE\n\n\n# value\n\n\nexport\n \nCHILD_VARIABLE\n=\n1\n\n\necho\n \n$CHILD_VARIALBE\n\n\n# 1\n\n\nexit\n\n\necho\n \n$CHILD_VARIABLE\n\n\n# \n\n\n\n\n\n\n\nNotice how \nMY_VARIABLE\n is available in the child process, but the variable created \nwithin\n the child process it \nnot\n accessible from the parent process.\n\n\nThis concept is incredibly powerful and is how Avalon manages the individual environment variables for your projects and applications.\n\n\n\n\nPATH\n\n\nSome environment variables have special meaning to your operating system, \nPATH\n is one of them. It contains absolute paths from which executables are accessed.\n\n\nThat is, when you type \ngit\n on the command-line, your operating system performs a search in each of the paths listed in \nPATH\n until it finds it.\n\n\nIf you wanted to expose an executable of your own, you can add the directory containing the executable to the \nPATH\n.\n\n\n\n\nPYTHONPATH\n\n\nLike \nPATH\n, \nPYTHONPATH\n is where Python looks for files during \nimport\n.\n\n\n\n\n\n\n\n\nEvents\n\n\nAttach callbacks to critical events throughout the use of Avalon.\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\ndef\n \non_event\n():\n\n    \nprint\n(\n\"An event happened\"\n)\n\n\n\napi\n.\non\n(\n\"event\"\n,\n \non_event\n)\n\n\napi\n.\nemit\n(\n\"event\"\n)\n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \n\n          \n\n\nAn event happened\n          \n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\nSome events are called by Avalon.\n\n\n\n\ninit\n Called as early as possible during the initialisation of an application.\n\n\nnew\n Called upon the creation of a new document/scene\n\n\nsave\n Called upon saving a document/scene\n\n\n\n\n\n\n\n\nCustom Events\n\n\nAside from the built-in events, you can emit your own events too.\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\ndef\n \ncreate_alembic\n():\n\n    \n# Creating alembic..\n\n    \napi\n.\nemit\n(\n\"alembic_created\"\n)",
            "title": "Reference"
        },
        {
            "location": "/2.0/reference/#reference",
            "text": "This section covers high-level aspects of Avalon in an information-oriented fashion.   Looking for API reference?  See the  auto-generated documentation  for the Avalon API",
            "title": "Reference"
        },
        {
            "location": "/2.0/reference/#content-life-cycle",
            "text": "Data in Avalon is either persistent or in transit. Persistent data resides in either a file-system or database, whereas data in transit is in one of three states.    Note  For each state, there is an  API  for developers and at least one  GUI  for users.",
            "title": "Content Life Cycle"
        },
        {
            "location": "/2.0/reference/#create",
            "text": "Creation is the process of introducing new data into a project and is divided into two parts; asset and subset creation.  Assets  are abstract representations of the data used throughout a project - such as sequences, shots, characters and props - whereas  Subsets  represents data  per asset  - such as geometry, textures or rigs.  Asset and subset creation is governed by the  Project Inventory API  and  Creator API  respectively via one or more plug-ins associated to named \"families\" of data, such as  model ,  look  or  render .    Assets are created via the  Project Inventory API  and subsets are generally created via the use of a Digital Content Creation package, such as Autodesk Maya or The Foundry Nuke.  API Example  from   avalon   import   api  class   CreateModel ( api . Creator ): \n     \"\"\"Polygonal geometry for animation\"\"\" \n\n     label   =   \"Create Avalon Model\" \n     name   =   \"modelDefault\" \n     family   =   \"avalon.model\"   More information   Application Programming Interface  Graphical User Interface",
            "title": "Create"
        },
        {
            "location": "/2.0/reference/#import",
            "text": "Import is the process of parsing persistent data from disk and into the memory of a running application.  Due to data being either localised or referenced, import is referred to as  loading , a process governed by the  Loading API  through one or more plug-ins associated to named families of data.  API Example  from   avalon   import   api  class   LoadModel ( api . Loader ): \n     \"\"\"Load data of family avalon.model\"\"\" \n\n     label   =   \"Load Avalon Model\" \n     families   =   [ \"avalon.model\" ] \n     representations   =   [ \"ma\" ] \n\n     def   process ( self ,   name ,   namespace ,   context ): \n         from   maya   import   cmds \n         from   avalon   import   maya \n\n         with   maya . maintained_selection (): \n             nodes   =   cmds . file ( self . fname ) \n\n         self [:]   =   nodes   More information   Application Programming Interface  Graphical User Interface",
            "title": "Import"
        },
        {
            "location": "/2.0/reference/#export",
            "text": "Export is the process of transforming in-memory data native to an application into something that can persist on disk. During export, data is funneled through a validation mechanism that check for consistency. Because of this additional mechanism, export is referred to as  publishing .  The manner in which data is validated and written is governed by a series of plug-ins, orchestrated by the  Publishing API  and associated to families of data.  API Example  from   pyblish   import   api  class   ExtractAvalonModel ( api . InstancePlugin ): \n     \"\"\"Produce a stripped down Maya file from instance\"\"\" \n\n     label   =   \"Extract Avalon Model\" \n     order   =   api . ExtractorOrder \n     hosts   =   [ \"maya\" ] \n     families   =   [ \"avalon.model\" ] \n\n     def   process ( self ,   instance ): \n         from   maya   import   cmds \n         from   avalon   import   maya \n\n         with   maya . maintained_selection (),   maya . without_extension (): \n             cmds . select ( instance ,   noExpand = True ) \n             cmds . file ( path ,   typ = \"mayaAscii\" ,   exportSelected = True )   More information   Application Programming Interface  Graphical User Interface",
            "title": "Export"
        },
        {
            "location": "/2.0/reference/#persist",
            "text": "Once exported, data resides in one or two locations - as files in a file-system, or as documents in a database. The exact location within the file-system is governed by the  Project Configuration API  via path \"templates\" - a string encoded with placeholder variables associated to the various objects in the  object model , customisable per-project.   Example  { \n     \"work\" :   \"{root}/{project}/{asset}/work/{task}/{user}/{app}\" , \n     \"publish\" :   \"{root}/{project}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\"  }",
            "title": "Persist"
        },
        {
            "location": "/2.0/reference/#object-model",
            "text": "Wherever data is stored, it is stored as a hierarchy of increasingly granular objects, representative of the division of labour in each project created through Avalon.     Assets  represents the most course grained division of labour and is typically used for shots and builds, e.g. the 6 th  shot and the hero character.  Each asset contain one or more  Subsets  which are typically used for individual models and animation caches for a build or shot.  Each subset contain one or more  Versions  which are immutable sources of data containing the final element of the object model; the  Representation .  Representations are the storage method of a version, such as a .png thumbnail, an .obj geometry file or .mp4 turntable of a hero model. Both of which represents the same set of data in three different ways.  Each object containing a series of members defined by an explicit schema, enforced via  jsonschema  and organised hierarchically with the former containing the latter.  Read more   Read about schemas in the  Database section  below.",
            "title": "Object Model"
        },
        {
            "location": "/2.0/reference/#metadata",
            "text": "Every object in the model contains a dictionary member called  .data .  The conceptual difference between top-level members and members of  .data  is that top-level members can be assumed to exist in every application, whereas members of  .data  are optional.   Optional members facilitate flexible code at the cost of having more of it and therefore more to maintain.",
            "title": "Metadata"
        },
        {
            "location": "/2.0/reference/#database",
            "text": "Avalon stores data in two separate locations, on disk and in a database. The separation is made due to performance and search capabilities offered by databases.  MongoDB was chosen due to the inherent simplicity and similarity to Python's built-in dictionary type, and performance great enough to enable graphical user interfaces to be built without asynchronousity in mind.  Inside of MongoDB, data is stored as Collections containing many Documents. In Avalon, each Collection represents a project and documents make up the  Object Model .    Asset  Subset  Version  Representation   These form a hierarchy, where each contain the latter. Assets make up the top-level object within a project, and can represent anything from characters, shots to levels and more.     Asset  Description      Hulk  A bulky fellow    Bruce  The hero of the film    1000  First shot    1200  Second shot     Subsets is the asset broken down into smaller sets of information, such as a rig or a model.     Subset  Description      model  Hulk's model    rig  Hulk's rig    lookdev  Hulk's look    animation  Hulk's point cached geometry     A subset must have a least one Version, which is typically immutable.     Version  Comment      v001  Initial version    v002  Fixed whole in mesh    v003  Increased the size of pecs     Finally, in each version there is at least one Representation; typically a file or sequence of files.     Representation  Description      ma  Maya rig    mov  Turntable    abc  Still frame of mesh used in rig     Read more about the kinds of objects in  Schemas  below.",
            "title": "Database"
        },
        {
            "location": "/2.0/reference/#schemas",
            "text": "All data within the database and on disk follow a strict layout, known as a \"schema\".",
            "title": "Schemas"
        },
        {
            "location": "/2.0/reference/#project",
            "text": "A project is a top-level object that cannot be contained elsewhere, but contains everything else.  \nproject-2.0.json  { \n     \"config\" :   \"Document metadata\" , \n     \"data\" :   \"Document metadata\" , \n     \"name\" :   \"Name of directory\" , \n     \"parent\" :   \"Unique identifier to parent document\" , \n     \"schema\" :   \"Schema identifier for payload\" , \n     \"type\" :   \"The type of document\"  }   Example  { \n     \"config\" :   { \n         \"apps\" :   [ \n             { \n                 \"label\" :   \"Autodesk Maya 2016\" , \n                 \"name\" :   \"maya2016\" \n             }, \n             { \n                 \"label\" :   \"The Foundry Nuke 10.0\" , \n                 \"name\" :   \"nuke10\" \n             } \n         ], \n         \"schema\" :   \"avalon-core:config-1.0\" , \n         \"tasks\" :   [ \n             { \n                 \"name\" :   \"model\" \n             }, \n             { \n                 \"name\" :   \"render\" \n             }, \n             { \n                 \"name\" :   \"animate\" \n             }, \n             { \n                 \"name\" :   \"rig\" \n             }, \n             { \n                 \"name\" :   \"lookdev\" \n             }, \n             { \n                 \"name\" :   \"layout\" \n             } \n         ], \n         \"template\" :   { \n             \"publish\" :   \"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\" , \n             \"work\" :   \"{root}/{project}/{silo}/{asset}/work/{task}/{app}\" \n         } \n     }, \n     \"data\" :   { \n         \"fps\" :   24 , \n         \"height\" :   1080 , \n         \"width\" :   1920 \n     }, \n     \"name\" :   \"hulk\" , \n     \"parent\" :   \"592c33475f8c1b064c4d1696\" , \n     \"schema\" :   \"avalon-core:project-2.0\" , \n     \"type\" :   \"project\"  }",
            "title": "Project"
        },
        {
            "location": "/2.0/reference/#asset",
            "text": "A part of a project, such as a Character or Shot.  \nasset-2.0.json  { \n     \"data\" :   \"Document metadata\" , \n     \"name\" :   \"Name of asset\" , \n     \"parent\" :   \"Unique identifier to parent document\" , \n     \"schema\" :   \"Schema identifier for payload\" , \n     \"silo\" :   \"Group or container of asset\" , \n     \"type\" :   \"The type of document\"  }   Example  { \n     \"data\" :   { \n         \"key\" :   \"value\" \n     }, \n     \"name\" :   \"Bruce\" , \n     \"parent\" :   \"592c33475f8c1b064c4d1696\" , \n     \"schema\" :   \"avalon-core:asset-2.0\" , \n     \"silo\" :   \"assets\" , \n     \"type\" :   \"asset\"  }",
            "title": "Asset"
        },
        {
            "location": "/2.0/reference/#subset",
            "text": "A part of an  Asset , such as a model or a rig.  \nsubset-2.0.json  { \n     \"data\" :   \"Document metadata\" , \n     \"name\" :   \"Name of directory\" , \n     \"parent\" :   \"Unique identifier to parent document\" , \n     \"schema\" :   \"The schema associated with this document\" , \n     \"type\" :   \"The type of document\"  }   Example  { \n     \"data\" :   { \n         \"frameEnd\" :   1201 , \n         \"frameStart\" :   1000 \n     }, \n     \"name\" :   \"shot01\" , \n     \"parent\" :   \"592c33475f8c1b064c4d1696\" , \n     \"schema\" :   \"avalon-core:subset-2.0\" , \n     \"type\" :   \"subset\"  }",
            "title": "Subset"
        },
        {
            "location": "/2.0/reference/#version",
            "text": "An immutable iteration of a  Subset .  Versions are immutable, in that they never change once made. This is in stark contrast to mutable versions which is when one version may be \"updated\" such that the same file now contains new information.  \nversion-2.0.json  { \n     \"data\" :   \"Document metadata\" , \n     \"locations\" :   \"Where on the planet this version can be found.\" , \n     \"name\" :   \"Number of version\" , \n     \"parent\" :   \"Unique identifier to parent document\" , \n     \"schema\" :   \"The schema associated with this document\" , \n     \"type\" :   \"The type of document\"  }   Example  { \n     \"data\" :   { \n         \"author\" :   \"marcus\" , \n         \"families\" :   [ \n             \"avalon.model\" \n         ], \n         \"source\" :   \"{root}/f02_prod/assets/BubbleWitch/work/modeling/marcus/maya/scenes/model_v001.ma\" , \n         \"time\" :   \"20170510T090203Z\" \n     }, \n     \"locations\" :   [ \n         \"data.avalon.com\" \n     ], \n     \"name\" :   12 , \n     \"parent\" :   \"592c33475f8c1b064c4d1696\" , \n     \"schema\" :   \"avalon-core:version-2.0\" , \n     \"type\" :   \"version\"  }",
            "title": "Version"
        },
        {
            "location": "/2.0/reference/#representation",
            "text": "One of many representations of a  Version .  Think of a representation as one way of storing the same set of data on disk. For example, an image may be stored as both PNG and JPEG. Different files, same data. It could also be stored as a description.  \"A picture of my computer.\"  Much less information is ultimately stored, but it is nonetheless the exact same original data in a different (albeit lossy) representation. The image could also be represented by a feeling (warm, mystical) or a spoken word (muah!).  Representations are very powerful and lie at the heart of assets that are more than just a single file.  As a practical example, a Look is stored as both an MA scene file and a JSON. The JSON stores the shader relationships, whereas the MA file stores the actual shaders. Same data, different representations.  \nrepresentation-2.0.json  { \n     \"context\" :   \"Summary of the context to which this representation belong.\" , \n     \"data\" :   \"Document metadata\" , \n     \"dependencies\" :   \"Other representation that this representation depends on\" , \n     \"name\" :   \"Name of representation\" , \n     \"parent\" :   \"Unique identifier to parent document\" , \n     \"schema\" :   \"Schema identifier for payload\" , \n     \"type\" :   \"The type of document\"  }   Example  { \n     \"context\" :   { \n         \"asset\" :   \"Bruce\" , \n         \"project\" :   \"hulk\" , \n         \"representation\" :   \"ma\" , \n         \"silo\" :   \"assets\" , \n         \"subset\" :   \"rigDefault\" , \n         \"version\" :   12 \n     }, \n     \"data\" :   { \n         \"label\" :   \"Alembic\" \n     }, \n     \"dependencies\" :   [ \n         \"592d547a5f8c1b388093c145\" \n     ], \n     \"name\" :   \"abc\" , \n     \"parent\" :   \"592c33475f8c1b064c4d1696\" , \n     \"schema\" :   \"avalon-core:representation-2.0\" , \n     \"type\" :   \"representation\"  }",
            "title": "Representation"
        },
        {
            "location": "/2.0/reference/#container",
            "text": "An imported  Version , as yielded from  api . registered_host (). ls () .  \ncontainer-2.0.json  { \n     \"id\" :   \"Identifier for finding object in host\" , \n     \"loader\" :   \"Name of loader plug-in used to produce this container\" , \n     \"name\" :   \"Internal object name of container in application\" , \n     \"namespace\" :   \"Internal namespace of container in application\" , \n     \"objectName\" :   \"Name of internal object, such as the objectSet in Maya.\" , \n     \"representation\" :   \"Unique id of representation in database\" , \n     \"schema\" :   \"Schema identifier for payload\"  }   Example  { \n     \"id\" :   \"pyblish.avalon.container\" , \n     \"loader\" :   \"ModelLoader\" , \n     \"name\" :   \"modelDefault_01\" , \n     \"namespace\" :   \"Bruce_\" , \n     \"objectName\" :   \"Bruce_:rigDefault_CON\" , \n     \"representation\" :   \"59523f355f8c1b5f6c5e8348\" , \n     \"schema\" :   \"avalon-core:container-2.0\"  }",
            "title": "Container"
        },
        {
            "location": "/2.0/reference/#software",
            "text": "Avalon assumes content is created within an application of some kind and manages the execution of each application via  Launcher .",
            "title": "Software"
        },
        {
            "location": "/2.0/reference/#apps",
            "text": "Launcher  is responsible for launching \"apps\", such as Maya. \"App\" is the term used for a pre-configured application in Avalon.  Problem  It could call on  c : \\ Program   Files \\ Autodesk \\ Maya2017 \\ bin \\ maya . exe  directly, but doing so is problematic because..   It assumes a particular operating system  It assumes a particular installation directory  It assumes a particular app is what you want for your project(s)  It assumes no customisation of environment prior to launch   Solution  The  Project Executable API  addresses this by splitting the problem it into three independently configurable parts.   Apps are assumed to be available on your  PATH , e.g.  maya . sh  or  maya . bat  Configuration is performed per application in an individual configuration file, e.g.  maya . toml  Apps are associated per project, e.g. Hulk uses Maya and Nuke.",
            "title": "Apps"
        },
        {
            "location": "/2.0/reference/#library-api",
            "text": "Public members of  avalon . api . See  API Documentation  for full details.     Member  Description      install  Install  host  into the running Python session.    uninstall  Undo all of what  install ()  did    schema  Wrapper around :mod: jsonschema    Loader  Load representation into host application    Creator  Determine how assets are created    Action  A custom action available    InventoryAction  A custom action for the scene inventory tool    Application  Default application launcher    discover  Find and return subclasses of  superclass    Session  dict() -> new empty dictionary    session  dict() -> new empty dictionary    on  Call  callback  on  event    after  Convenience to  on ()  for after-events    before  Convenience to  on ()  for before-events    emit  Trigger an  event    publish  Shorthand to publish from within host    create  Create a new instance    load  Use Loader to load a representation.    update  Update a container    switch  Switch a container to representation    remove  Remove a container    data  dict() -> new empty dictionary    update_current_task  Update active Session to a new task work area.    get_representation_path  Get filename from representation document    loaders_from_representation  Return all compatible loaders for a representation.    register_host  Register a new host for the current process    register_plugin_path  Register a directory of one or more plug-ins    register_plugin  Register an individual  obj  of type  superclass    register_root  Register currently active root    registered_root  Return currently registered root    registered_plugin_paths  Return all currently registered plug-in paths    registered_host  Return currently registered host    registered_config  Return currently registered config    deregister_plugin  Oppsite of  register_plugin ()    deregister_plugin_path  Oppsite of  register_plugin_path ()    logger     time  Return file-system safe string of current date and time",
            "title": "Library API"
        },
        {
            "location": "/2.0/reference/#host-api",
            "text": "A host must implement the following members.     Member  Returns  Description      ls  generator  List loaded assets    create  str  Build fixture for outgoing data (see  instance ), returns instance.    load  None  Import external data into  container    update  None  Update an existing container    remove  None  Remove an existing container",
            "title": "Host API"
        },
        {
            "location": "/2.0/reference/#information-hierarchy",
            "text": "Imported data is stored in a  container . A container hosts a loaded asset along with metadata used to associate assets that use other assets, such as a Wheel asset used in a Car asset.",
            "title": "Information hierarchy"
        },
        {
            "location": "/2.0/reference/#id",
            "text": "Internally, Pyblish instances and containers are distinguished from native content via an \"id\". For example, in Maya, the  id  is a user-defined attribute.     Name  Description  Example      pyblish . avalon . container  Unit of incoming data  ...: model_GRP ,  ...: rig_GRP    pyblish . avalon . instance  Unit of outgoing data  Strange_model_default",
            "title": "Id"
        },
        {
            "location": "/2.0/reference/#project-inventory-api",
            "text": "The inventory contains all ASSETs of a project, including metadata.   Icon Database   .inventory.toml  # Mandatory, do not touch  schema   =   \"avalon-core:inventory-1.0\"  # Project metadata  label   =   \"The Hulk\"  fps   =   24  resolution_width   =   1920  resolution_height   =   1080  # Available assets  [[assets]]  name   =   \"Batman\"  [[assets]]  name   =   \"Bruce\"  label   =   \"Bruce Wayne\"  # (Optional) Nicer name  group   =   \"Character\"  # (Optional) Visual grouping  icon   =   \"gear\"  # (Optional) Icon from FontAwesome  [[assets]]  name   =   \"Camera\"  # Available shots  [[film]]  name   =   \"1000\"  edit_in   =   1000  edit_out   =   1202  [[film]]  name   =   \"1200\"  edit_in   =   1000  # Optional metadata per shot  edit_out   =   1143   The above is an example of an \"inventory\". A complete snapshot of all available assts within a given project, along with optional metadata.",
            "title": "Project Inventory API"
        },
        {
            "location": "/2.0/reference/#project-configuration-api",
            "text": "The project configuration contains the applications and tasks available within a given project, along with the template used to create directories.  .config.toml  # Mandatory, do not touch  schema   =   \"avalon-core:config-1.0\"  # Available tasks to choose from.  [[tasks]]  name   =   \"modeling\"  label   =   \"Character Modeling\"  icon   =   \"video-camera\"  [[tasks]]  name   =   \"animation\"  # Available applications to choose from, the name references  # the executable API (see below)  [[apps]]  name   =   \"maya2016\"  label   =   \"Autodesk Maya 2016\"  [[apps]]  name   =   \"python\"  label   =   \"Python 3.6\"  args   =   [\"-u\", \"-c\", \"print('Something nice')\"]  # Directory layouts for this project.  [template]  work   =   \"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\"  publish   =   \"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\"   The directory layout have the following members available.     Member  Type  Description      { app }  str  The current application directory name, defined in Executable API    { task }  str  Name of the current task    { user }  str  Currently logged on user (provided by  getpass . getuser () )    { root }  str  Absolute path to root directory, e.g.  m : \\ f01_project    { project }  str  Name of current project    { silo }  str  Name of silo, e.g.  assets    { asset }  str  Name of asset, e.g.  Bruce    { subset }  str  Name of subset, e.g.  modelDefault    { version }  int  Number of version, e.g.  1    { representation }  str  Name of representation, e.g.  ma",
            "title": "Project Configuration API"
        },
        {
            "location": "/2.0/reference/#project-executable-api",
            "text": "Every executable must have an associated Application Definition file which looks like this.  maya2016.toml  # Required header, do not touch.  schema   =   \"avalon-core:application-1.0\"  # Name of the created directory, available in the   # `template` of the Configuration API  application_dir   =   \"maya\"  # These directories will be created under the  # given application directory  default_dirs   =   [      \"scenes\",      \"data\",      \"renderData/shaders\",      \"images\"  ]  # Name displayed in GUIs  label   =   \"Autodesk Maya 2016x64\"  # Arguments passed to the executable on launch  arguments   =   [ \"-proj\", \"{AVALON_WORKDIR}\",]  # Name of the executable on the local computer.  # This name must be available via the users `PATH`.  # That is, the user must be able to type this into  # the terminal to launch said application.  executable   =   \"maya2016\"  description   =   \"\"  # Files copied into the application directory on launch  [copy]  \"{AVALON_CORE}/res/workspace.mel\"   =   \"workspace.mel\"  # The environment variables overrides any previously set  # variables from the parent process.  [environment]  MAYA_DISABLE_CLIC_IPM   =   \"Yes\"  # Disable the AdSSO process  MAYA_DISABLE_CIP   =   \"Yes\"  # Shorten time to boot  MAYA_DISABLE_CER   =   \"Yes\"  PYTHONPATH   =   [      \"{PYBLISH_MAYA}/pyblish_maya/pythonpath\",      \"{AVALON_CORE}/avalon/maya/pythonpath\",      \"{PYTHONPATH}\"  ]",
            "title": "Project Executable API"
        },
        {
            "location": "/2.0/reference/#project-template-api",
            "text": "The vast majority of data managed by Avalon is stored as files on disk, and every file has a path. The path is an integral part of any production and requires fine-grained control.  Avalon provides this control in the form of  templates .  A template is a string of  { placeholders } , each placeholder representing some data.  template   =   \"{project}/{asset}/myfile_v{version:0>3}.ma\"   The keywords within the  {}  are known as  placeholders  and may be dynamically replaced at run-time by your code.  Example  On saving a file, this template could be used to construct a path.  template   =   \"{project}/{asset}/myfile_{version:0>3}.ma\"  fname   =   template . format ( \n     project = \"hulk\" , \n     asset = \"bruce\" , \n     version = 13  )  print ( fname )   \n   \n     \n       \n         \n            hulk/bruce/myfile_013.ma            \n         \n       \n     \n     Provided that pass the same data, the template itself can vary, whilst leaving your code intact.  template   =   \"c:/assets/{asset}/{project}/myfile_version{version:0>2}.mb\"   Viola, a drastically different directory layout, with identical data and code to process it. Notice how this templates includes reference to  c : \\  which not only asserts a particular operating system (Windows) but also leaves no room for an alternative \"root\". See  Root Template  below for an example of how to overcome this limitation.  This is how Avalon works.  In this way, you can establish  convention  at a high-level whilst still remaning  specific  in places where you need to either read from or write to disk. More importantly, this is the aspect which allows Avalon to not make assumptions about your directory layout; it is up to you to write this template.  Having said that, though Avalon doesn't make assumptions about  where  data is written, it  does  make assumptions on the types of data written - referred to as the Avalon Object Model - and your directory layout must accommodate for these types at minimum.   See  Object Model  for a high-level overview of these types   For any project, Avalon assumes a  work  template to be available in your  Project Configuration . This template is used to generate the initial directory layout for your work-in-progress files.  The layout and ordering of placeholders in this template is within your control, and these are the ones available to you.  { \n     \"root\" :   \"Currently registered root, e.g. 'c:/projects'\" , \n     \"project\" :   \"Current project, e.g. 'hulk'\" , \n     \"silo\" :   \"Current silo, e.g. 'assets', 'film', 'episodes'\" , \n     \"asset\" :   \"Current asset, e.g. 'Bruce'\" , \n     \"task\" :   \"Current task\" , \n     \"app\" :   \"Current app, e.g. 'maya2019'\" , \n     \"user\" :   \"Current user, e.g. 'rick'\"  }   Here's an example of a  work  template.  template   =   \"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\"    See  Project Configuration API  for more.",
            "title": "Project Template API"
        },
        {
            "location": "/2.0/reference/#template-access",
            "text": "Templates are generally stored in your  project configuration .  # Untested  from   avalon   import   io  project   =   io . find_one ({ \"type\" :   \"project\" })  template   =   project [ \"config\" ][ \"template\" ][ \"work\" ]",
            "title": "Template Access"
        },
        {
            "location": "/2.0/reference/#root-template",
            "text": "Every path has a \"root\"; the first part of a path.  c : \\  / root  / projects /   When a template includes a root explicitly, like any of the above, then a template is limited to (1) a particular platform and (2) a particular mount on that platform.  For example, if your studio is exclusively on Windows and all share the drive  z : \\ , then it is safe to embed this into your template.  template   =   \"z:/projects/{project}/{asset}/...\"   However, when there are multiple operating systems and/or multiple mount points - e.g.  z : \\  on some machines and and  x : \\  on others - then the above template no longer works.  To work around this, Avalon provides the idea of a \"root\" directory.  # Windows box, from our London branch  from   avalon   import   api  api . register_root ( r \"c:\\projects\" )   At run-time, a root directory is registered relative your platform and mount point, such that your template can look like..  template   =   \"{root}/{project}{asset}...\"   Such that, on another platform or machine, the root registration can change to account for a differing root.  # Linux box, in LA  from   avalon   import   api  api . register_root ( \"/mnt/projects\" )   As a result, your folder creation and publishing code can remain as-is, whilst assets are being read and written all over the place.",
            "title": "Root Template"
        },
        {
            "location": "/2.0/reference/#environment-variables",
            "text": "Avalon uses environment variables extensively. For example, simply running an application involves two layers of information exchange.   Your shell > Launcher  Launcher > Application   In this documentation, environment variables are UPPERCASE and setting one is similar across all platforms.  \n   \n     cmd \n   \n   \n     bash \n      set   MY_VARIABLE = value    export   MY_VARIABLE = value   Variables may also be set from within Python, by altering the  os . environ  dictionary.  import   os  os . environ [ \"MY_VARIABLE\" ]   =   \"value\"",
            "title": "Environment Variables"
        },
        {
            "location": "/2.0/reference/#avalon-environment",
            "text": "These are all environment variables relevant in some way to Avalon.  \nsession-1.0.json  { \n     \"AVALON_APP\" :   \"Name of application\" , \n     \"AVALON_ASSET\" :   \"Name of asset\" , \n     \"AVALON_CONFIG\" :   \"Name of Avalon configuration\" , \n     \"AVALON_CONTAINER_ID\" :   \"Unique identifier for a loaded representation in a working file\" , \n     \"AVALON_DB\" :   \"Name of database\" , \n     \"AVALON_DEADLINE\" :   \"Address to Deadline\" , \n     \"AVALON_DEBUG\" :   \"Enable debugging mode. Some applications may use this for e.g. extended verbosity or mock plug-ins.\" , \n     \"AVALON_INSTANCE_ID\" :   \"Unique identifier for instances in a working file\" , \n     \"AVALON_LABEL\" :   \"Nice name of Avalon, used in e.g. graphical user interfaces\" , \n     \"AVALON_MONGO\" :   \"Address to the asset database\" , \n     \"AVALON_PASSWORD\" :   \"Generic password\" , \n     \"AVALON_PROJECT\" :   \"Name of project\" , \n     \"AVALON_PROJECTS\" :   \"Absolute path to root of project directories\" , \n     \"AVALON_SENTRY\" :   \"Address to Sentry\" , \n     \"AVALON_SILO\" :   \"Name of asset group or container\" , \n     \"AVALON_TASK\" :   \"Name of task\" , \n     \"AVALON_TIMEOUT\" :   \"Wherever there is a need for a timeout, this is the default value.\" , \n     \"AVALON_UPLOAD\" :   \"Boolean of whether to upload published material to central asset repository\" , \n     \"AVALON_USERNAME\" :   \"Generic username\" , \n     \"AVALON_WORKDIR\" :   \"Current working directory of a host, such as Maya's location of workspace.mel\"  }   Example  { \n     \"AVALON_APP\" :   \"maya2016\" , \n     \"AVALON_ASSET\" :   \"Bruce\" , \n     \"AVALON_CONFIG\" :   \"polly\" , \n     \"AVALON_CONTAINER_ID\" :   \"avalon.container\" , \n     \"AVALON_DB\" :   \"avalon\" , \n     \"AVALON_DEADLINE\" :   \"http://192.168.99.101\" , \n     \"AVALON_DEBUG\" :   \"True\" , \n     \"AVALON_INSTANCE_ID\" :   \"avalon.instance\" , \n     \"AVALON_LABEL\" :   \"Mindbender\" , \n     \"AVALON_MONGO\" :   \"mongodb://localhost:27017\" , \n     \"AVALON_PASSWORD\" :   \"abc123\" , \n     \"AVALON_PROJECT\" :   \"Hulk\" , \n     \"AVALON_PROJECTS\" :   \"/nas/projects\" , \n     \"AVALON_SENTRY\" :   \"https://5b872b280de742919b115bdc8da076a5:8d278266fe764361b8fa6024af004a9c@logs.mindbender.com/2\" , \n     \"AVALON_SILO\" :   \"assets\" , \n     \"AVALON_TASK\" :   \"modeling\" , \n     \"AVALON_TIMEOUT\" :   \"1000\" , \n     \"AVALON_UPLOAD\" :   \"True\" , \n     \"AVALON_USERNAME\" :   \"myself\" , \n     \"AVALON_WORKDIR\" :   \"/mnt/projects/alita/assets/vector/maya\"  }",
            "title": "Avalon Environment"
        },
        {
            "location": "/2.0/reference/#inheritance-and-persistence",
            "text": "Setting a variable as above only affects the current instance of the process, such as  cmd . exe  and  python . That's because variables are  inherited .  Inheritance in this context means that any process launched from a parent process will contain a duplicate of the parent environment, and no change you make to the environment of this child process will affect the parent process.  \n   \n     cmd \n   \n   \n     bash \n      set   MY_VARIABLE = value\ncmd echo   %MY_VARIABLE%  : : value  set   CHILD_VARIABLE = 1 echo   %CHILD_VARIABLE%  : : 1  exit  echo   %CHILD_VARIABLE%  : : %CHILD_VARIABLE%     export   MY_VARIABLE = value\ncmd echo   $MY_VARIABLE  # value  export   CHILD_VARIABLE = 1  echo   $CHILD_VARIALBE  # 1  exit  echo   $CHILD_VARIABLE  #     Notice how  MY_VARIABLE  is available in the child process, but the variable created  within  the child process it  not  accessible from the parent process.  This concept is incredibly powerful and is how Avalon manages the individual environment variables for your projects and applications.",
            "title": "Inheritance and Persistence"
        },
        {
            "location": "/2.0/reference/#path",
            "text": "Some environment variables have special meaning to your operating system,  PATH  is one of them. It contains absolute paths from which executables are accessed.  That is, when you type  git  on the command-line, your operating system performs a search in each of the paths listed in  PATH  until it finds it.  If you wanted to expose an executable of your own, you can add the directory containing the executable to the  PATH .",
            "title": "PATH"
        },
        {
            "location": "/2.0/reference/#pythonpath",
            "text": "Like  PATH ,  PYTHONPATH  is where Python looks for files during  import .",
            "title": "PYTHONPATH"
        },
        {
            "location": "/2.0/reference/#events",
            "text": "Attach callbacks to critical events throughout the use of Avalon.  from   avalon   import   api  def   on_event (): \n     print ( \"An event happened\" )  api . on ( \"event\" ,   on_event )  api . emit ( \"event\" )   \n   \n     \n       \n         \n            An event happened            \n         \n       \n     \n     Some events are called by Avalon.   init  Called as early as possible during the initialisation of an application.  new  Called upon the creation of a new document/scene  save  Called upon saving a document/scene",
            "title": "Events"
        },
        {
            "location": "/2.0/reference/#custom-events",
            "text": "Aside from the built-in events, you can emit your own events too.  from   avalon   import   api  def   create_alembic (): \n     # Creating alembic.. \n     api . emit ( \"alembic_created\" )",
            "title": "Custom Events"
        },
        {
            "location": "/2.0/tools/",
            "text": "Tools\n\n\nAvalon ships with a number of graphical user interfaces for the end-user.\n\n\n\n\nLaunch\n\n\nCreate\n\n\nExport\n\n\nImport\n\n\nScene Inventory\n\n\nProject Inventory\n\n\n\n\n\n\n\n\n\n\n\n\nLauncher\n\n\nContent is assumed to be created in an application of some kind, and the Launcher is responsible for having one up and running, within an environment suitable for a given project and application.\n\n\n\n\n\n\n\nSee \nApplication Executable API\n for details on how to customise the Launcher.\n\n\n\n\n\n\n\n\n\n\nCreator\n\n\nAssociate content with a family.\n\n\nThe family is what determins how the content is handled throughout your pipeline and tells Pyblish what it should look like when valid.\n\n\n\n\n\nAPI Example\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\nclass\n \nCreateModel\n(\napi\n.\nCreator\n):\n\n    \n\"\"\"Polygonal geometry for animation\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Create Avalon Model\"\n\n    \nname\n \n=\n \n\"modelDefault\"\n\n    \nfamily\n \n=\n \n\"avalon.model\"\n\n\n\napi\n.\nregister_plugin\n(\napi\n.\nCreator\n,\n \nCreateModel\n)\n\n\n\n\n\n\n\n\n\n\n\nLoader\n\n\nImport available assets from the currently set project.\n\n\n\n\n\nAPI Example\n\n\nfrom\n \navalon\n \nimport\n \napi\n\n\n\nclass\n \nLoadModel\n(\napi\n.\nLoader\n):\n\n    \n\"\"\"Load data of family avalon.model\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Load Avalon Model\"\n\n    \nfamilies\n \n=\n \n[\n\"avalon.model\"\n]\n\n    \nrepresentations\n \n=\n \n[\n\"ma\"\n]\n\n\n    \ndef\n \nprocess\n(\nself\n,\n \nname\n,\n \nnamespace\n,\n \ncontext\n):\n\n        \nfrom\n \nmaya\n \nimport\n \ncmds\n\n        \nfrom\n \navalon\n \nimport\n \nmaya\n\n\n        \nwith\n \nmaya\n.\nmaintained_selection\n():\n\n            \nnodes\n \n=\n \ncmds\n.\nfile\n(\nself\n.\nfname\n)\n\n\n        \nself\n[:]\n \n=\n \nnodes\n\n\n\napi\n.\nregister_plugin\n(\napi\n.\nLoader\n,\n \nLoadModel\n)\n\n\n\n\n\n\n\n\n\n\n\nPublisher\n\n\nData shared amongst artists pass through what's known as a \"publishing\" step.\n\n\n\n\n\nAPI Example\n\n\nfrom\n \npyblish\n \nimport\n \napi\n\n\n\nclass\n \nExtractAvalonModel\n(\napi\n.\nInstancePlugin\n):\n\n    \n\"\"\"Produce a stripped down Maya file from instance\"\"\"\n\n\n    \nlabel\n \n=\n \n\"Extract Avalon Model\"\n\n    \norder\n \n=\n \napi\n.\nExtractorOrder\n\n    \nhosts\n \n=\n \n[\n\"python\"\n]\n\n    \nfamilies\n \n=\n \n[\n\"avalon.model\"\n]\n\n\n    \ndef\n \nprocess\n(\nself\n,\n \ninstance\n):\n\n        \nfrom\n \nmaya\n \nimport\n \ncmds\n\n        \nfrom\n \navalon\n \nimport\n \nmaya\n\n\n        \nwith\n \nmaya\n.\nmaintained_selection\n(),\n \nmaya\n.\nwithout_extension\n():\n\n            \ncmds\n.\nselect\n(\ninstance\n,\n \nnoExpand\n=\nTrue\n)\n\n            \ncmds\n.\nfile\n(\npath\n,\n \ntyp\n=\n\"mayaAscii\"\n,\n \nexportSelected\n=\nTrue\n)\n\n\n\napi\n.\nregister_plugin\n(\nExtractAvalonModel\n)\n\n\n\n\n\n\n\n\n\n\n\nManager\n\n\nVisualise loaded assets.\n\n\n\n\n\nfrom\n \navalon\n \nimport\n \nmaya\n\n\n\nfor\n \ncontainer\n \nin\n \nmaya\n.\nls\n():\n\n    \nprint\n(\ncontainer\n[\n\"name\"\n])\n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \n\n          \n\n\nTraceback (most recent call last):\n\n\n  File \"/tmp/tmp3wbahzja/block.py\", line 1, in \n\n\n    from avalon import maya\n\n\n  File \"/home/travis/build/getavalon/docs/core/avalon/maya/__init__.py\", line 7, in \n\n\n    from .pipeline import (\n\n\n  File \"/home/travis/build/getavalon/docs/core/avalon/maya/pipeline.py\", line 7, in \n\n\n    from maya import cmds, OpenMaya\n\n\nModuleNotFoundError: No module named 'maya'\n          \n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nWorkfiles\n\n\nManage your workfiles.\n\n\nDocumentation",
            "title": "Tools"
        },
        {
            "location": "/2.0/tools/#tools",
            "text": "Avalon ships with a number of graphical user interfaces for the end-user.   Launch  Create  Export  Import  Scene Inventory  Project Inventory",
            "title": "Tools"
        },
        {
            "location": "/2.0/tools/#launcher",
            "text": "Content is assumed to be created in an application of some kind, and the Launcher is responsible for having one up and running, within an environment suitable for a given project and application.    See  Application Executable API  for details on how to customise the Launcher.",
            "title": "Launcher"
        },
        {
            "location": "/2.0/tools/#creator",
            "text": "Associate content with a family.  The family is what determins how the content is handled throughout your pipeline and tells Pyblish what it should look like when valid.   API Example  from   avalon   import   api  class   CreateModel ( api . Creator ): \n     \"\"\"Polygonal geometry for animation\"\"\" \n\n     label   =   \"Create Avalon Model\" \n     name   =   \"modelDefault\" \n     family   =   \"avalon.model\"  api . register_plugin ( api . Creator ,   CreateModel )",
            "title": "Creator"
        },
        {
            "location": "/2.0/tools/#loader",
            "text": "Import available assets from the currently set project.   API Example  from   avalon   import   api  class   LoadModel ( api . Loader ): \n     \"\"\"Load data of family avalon.model\"\"\" \n\n     label   =   \"Load Avalon Model\" \n     families   =   [ \"avalon.model\" ] \n     representations   =   [ \"ma\" ] \n\n     def   process ( self ,   name ,   namespace ,   context ): \n         from   maya   import   cmds \n         from   avalon   import   maya \n\n         with   maya . maintained_selection (): \n             nodes   =   cmds . file ( self . fname ) \n\n         self [:]   =   nodes  api . register_plugin ( api . Loader ,   LoadModel )",
            "title": "Loader"
        },
        {
            "location": "/2.0/tools/#publisher",
            "text": "Data shared amongst artists pass through what's known as a \"publishing\" step.   API Example  from   pyblish   import   api  class   ExtractAvalonModel ( api . InstancePlugin ): \n     \"\"\"Produce a stripped down Maya file from instance\"\"\" \n\n     label   =   \"Extract Avalon Model\" \n     order   =   api . ExtractorOrder \n     hosts   =   [ \"python\" ] \n     families   =   [ \"avalon.model\" ] \n\n     def   process ( self ,   instance ): \n         from   maya   import   cmds \n         from   avalon   import   maya \n\n         with   maya . maintained_selection (),   maya . without_extension (): \n             cmds . select ( instance ,   noExpand = True ) \n             cmds . file ( path ,   typ = \"mayaAscii\" ,   exportSelected = True )  api . register_plugin ( ExtractAvalonModel )",
            "title": "Publisher"
        },
        {
            "location": "/2.0/tools/#manager",
            "text": "Visualise loaded assets.   from   avalon   import   maya  for   container   in   maya . ls (): \n     print ( container [ \"name\" ])   \n   \n     \n       \n         \n            Traceback (most recent call last):    File \"/tmp/tmp3wbahzja/block.py\", line 1, in       from avalon import maya    File \"/home/travis/build/getavalon/docs/core/avalon/maya/__init__.py\", line 7, in       from .pipeline import (    File \"/home/travis/build/getavalon/docs/core/avalon/maya/pipeline.py\", line 7, in       from maya import cmds, OpenMaya  ModuleNotFoundError: No module named 'maya'",
            "title": "Manager"
        },
        {
            "location": "/2.0/tools/#workfiles",
            "text": "Manage your workfiles.  Documentation",
            "title": "Workfiles"
        },
        {
            "location": "/2.0/glossary/",
            "text": "Glossary\n\n\nAvalon reserves the following words for private and public use. Public members are exposed to the user, private ones are internal to the implementation.\n\n\nPROJECTS\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nParent of projects\n\n\nm\n:\n\\\nf03_projects\n\n\n\n\n\n\n\n\nPROJECT\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nRoot of information\n\n\nGravity, Dr. Strange\n\n\n\n\n\n\n\n\nASSET\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nUnit of data\n\n\nRyan, Bicycle, Flower pot\n\n\n\n\n\n\n\n\nSUBSET\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nChild of ASSET\n\n\nRyan, Bicycle, Flower pot\n\n\n\n\n\n\n\n\nVERSION\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nA SUBSET iteration\n\n\nv1, v034\n\n\n\n\n\n\n\n\nREPRESENTATION\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nA data format\n\n\nMaya file, image sequence, thumbnail\n\n\n\n\n\n\n\n\nFORMAT\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nA file extension\n\n\n.ma\n, \n.abc\n, \n.ico\n, \n.png\n\n\n\n\n\n\n\n\nFAMILY\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nA type of ASSET\n\n\nmodel\n, \nrig\n, \nlook\n, \nanimation\n\n\n\n\n\n\n\n\nSILO\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nData repository\n\n\nRyan resides in \nassets\n, caches in \nfilm\n.\n\n\n\n\n\n\n\n\nINSTANCE\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nInverse of a file\n\n\nmodelDefault_SET\n\n\n\n\n\n\n\n\nSTAGE\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nTransient data\n\n\nOutgoing VERSION from scenefile\n\n\n\n\n\n\n\n\nPUBLIC\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nPublic data\n\n\nv034 of Ryan\n\n\n\n\n\n\n\n\nPRIVATE\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nTrue\n\n\nPrivate data\n\n\nScenefile for v034 of Ryan\n\n\n\n\n\n\n\n\nPRODUCER\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nCreator of data\n\n\nYou\n\n\n\n\n\n\n\n\nCONSUMER\n\n\n\n\n\n\n\n\nPublic\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nUser of data\n\n\nMe",
            "title": "Glossary"
        },
        {
            "location": "/2.0/glossary/#glossary",
            "text": "Avalon reserves the following words for private and public use. Public members are exposed to the user, private ones are internal to the implementation.",
            "title": "Glossary"
        },
        {
            "location": "/2.0/glossary/#projects",
            "text": "Public  Description  Example      True  Parent of projects  m : \\ f03_projects",
            "title": "PROJECTS"
        },
        {
            "location": "/2.0/glossary/#project",
            "text": "Public  Description  Example      True  Root of information  Gravity, Dr. Strange",
            "title": "PROJECT"
        },
        {
            "location": "/2.0/glossary/#asset",
            "text": "Public  Description  Example      True  Unit of data  Ryan, Bicycle, Flower pot",
            "title": "ASSET"
        },
        {
            "location": "/2.0/glossary/#subset",
            "text": "Public  Description  Example      True  Child of ASSET  Ryan, Bicycle, Flower pot",
            "title": "SUBSET"
        },
        {
            "location": "/2.0/glossary/#version",
            "text": "Public  Description  Example      True  A SUBSET iteration  v1, v034",
            "title": "VERSION"
        },
        {
            "location": "/2.0/glossary/#representation",
            "text": "Public  Description  Example       A data format  Maya file, image sequence, thumbnail",
            "title": "REPRESENTATION"
        },
        {
            "location": "/2.0/glossary/#format",
            "text": "Public  Description  Example       A file extension  .ma ,  .abc ,  .ico ,  .png",
            "title": "FORMAT"
        },
        {
            "location": "/2.0/glossary/#family",
            "text": "Public  Description  Example      True  A type of ASSET  model ,  rig ,  look ,  animation",
            "title": "FAMILY"
        },
        {
            "location": "/2.0/glossary/#silo",
            "text": "Public  Description  Example       Data repository  Ryan resides in  assets , caches in  film .",
            "title": "SILO"
        },
        {
            "location": "/2.0/glossary/#instance",
            "text": "Public  Description  Example       Inverse of a file  modelDefault_SET",
            "title": "INSTANCE"
        },
        {
            "location": "/2.0/glossary/#stage",
            "text": "Public  Description  Example       Transient data  Outgoing VERSION from scenefile",
            "title": "STAGE"
        },
        {
            "location": "/2.0/glossary/#public",
            "text": "Public  Description  Example      True  Public data  v034 of Ryan",
            "title": "PUBLIC"
        },
        {
            "location": "/2.0/glossary/#private",
            "text": "Public  Description  Example      True  Private data  Scenefile for v034 of Ryan",
            "title": "PRIVATE"
        },
        {
            "location": "/2.0/glossary/#producer",
            "text": "Public  Description  Example       Creator of data  You",
            "title": "PRODUCER"
        },
        {
            "location": "/2.0/glossary/#consumer",
            "text": "Public  Description  Example       User of data  Me",
            "title": "CONSUMER"
        },
        {
            "location": "/polly/",
            "text": "Todo",
            "title": "Home"
        },
        {
            "location": "/polly/assets/",
            "text": "The available asset types in Polly.\n\n\nContract\n\n\nAvalon defines these families.\n\n\n\n\n\n\n\n\nFamily\n\n\nDefinition\n\n\nLink\n\n\n\n\n\n\n\n\n\n\navalon\n.\nmodel\n\n\nGeometry with deformable topology\n\n\nSpec\n\n\n\n\n\n\navalon\n.\nrig\n\n\nAn articulated \navalon\n.\nmodel\n for animators\n\n\nSpec\n\n\n\n\n\n\navalon\n.\nanimation\n\n\nPointcached \navalon\n.\nrig\n for rendering\n\n\nSpec\n\n\n\n\n\n\navalon\n.\nlookdev\n\n\nShaded \navalon\n.\nmodel\n for rendering\n\n\nSpec\n\n\n\n\n\n\n\n\n\n\n\n\navalon\n.\nmodel\n\n\nA generic representation of geometry.\n\n\n \nWorkflow\n\n\n\n\nCreate a new \nModel\n INSTANCE.\n\n\nAdd the \nROOT\n group\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nTexturing\n\n\nRigging\n\n\nFinal render\n\n\n\n\n \nRequirements\n\n\n\n\nAll DAG nodes must be parented to a single top-level transform\n\n\nNormals must be unlocked\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\ngeometry_SEL\n \n(\ngeometry\n)\n: Meshes suitable for rigging\n\n\naux_SEL\n \n(\nany\n,\n \noptional\n)\n: Auxilliary meshes for e.g. fast preview, collision geometry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\navalon\n.\nrig\n\n\nThe \navalon\n.\nrig\n contains the necessary implementation and interface for animators to animate. \n\n\n \nWorkfow\n\n\n\n\nAdd the \nROOT\n group\n\n\nAdd animatable controllers to an \nobjectSet\n called \ncontrols_SET\n\n\nAdd cachable meshes to an \nobjectSet\n called \nout_SET\n\n\n\n\nPublishing.\n\n\n\n\nCreate a new \nRig\n INSTANCE\n\n\nAdd \nROOT\n\n\nAdd \ncontrols_SET\n\n\nAdd \nout_SET\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nAnimation\n\n\n\n\n \nRequirements\n\n\n\n\nAll DAG nodes must be parented to a single top-level transform\n\n\nMust contain an \nobjectSet\n for controls and cachable geometry\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nin_SEL\n \n(\ngeometry\n,\n \noptional\n)\n: Geometry consumed by this rig\n\n\nout_SEL\n \n(\ngeometry\n)\n: Geometry produced by this rig\n\n\ncontrols_SEL\n \n(\ntransforms\n)\n: All animatable controls\n\n\nresources_SEL\n \n(\nany\n,\n \noptional\n)\n: Nodes that reference an external file\n\n\n\n\n\n\n\n\n\n\navalon\n.\nanimation\n\n\nPoint positions and normals represented as one Alembic file.\n\n\n \nWorkflow\n\n\nThe animator workflow is simplified by the fact that an INSTANCE is automatically created upon loading a rig.\n\n\n\n\nLoad rig\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nLighting\n\n\nFX\n\n\nCloth\n\n\nHair\n\n\n\n\n \nRequirements\n\n\n\n\nNone\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\navalon\n.\nlookdev\n\n\n \nWorkflow\n\n\nShaders are exported relative the meshes in an INSTANCE.\n\n\n\n\nCreate a new \nLook\n INSTANCE\n\n\nAdd the \ntransform\n of each shaded mesh\n\n\nPublish\n\n\n\n\n \nTarget Audience\n\n\n\n\nLighting\n\n\n\n\n \nRequirements\n\n\n\n\nNone\n\n\n\n\n \nData\n\n\n\n\nname\n \n(\nstr\n,\n \noptional\n)\n: Pretty printed name in graphical user interfaces\n\n\n\n\n \nSets\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\nWho is the end result of this family intended for?\n\n\n\n\n\n\n\n\nRequirements\n\n\nWhat is expected of this ASSET before it passes the tests?\n\n\n\n\n\n\n\n\nData\n\n\nEnd-user configurable options\n\n\n\n\n\n\n\n\nSets\n\n\nCollection of specific items for publishing or use further down the pipeline.",
            "title": "Assets"
        },
        {
            "location": "/polly/assets/#contract",
            "text": "Avalon defines these families.     Family  Definition  Link      avalon . model  Geometry with deformable topology  Spec    avalon . rig  An articulated  avalon . model  for animators  Spec    avalon . animation  Pointcached  avalon . rig  for rendering  Spec    avalon . lookdev  Shaded  avalon . model  for rendering  Spec",
            "title": "Contract"
        },
        {
            "location": "/polly/assets/#avalonmodel",
            "text": "A generic representation of geometry.    Workflow   Create a new  Model  INSTANCE.  Add the  ROOT  group  Publish     Target Audience   Texturing  Rigging  Final render     Requirements   All DAG nodes must be parented to a single top-level transform  Normals must be unlocked     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   geometry_SEL   ( geometry ) : Meshes suitable for rigging  aux_SEL   ( any ,   optional ) : Auxilliary meshes for e.g. fast preview, collision geometry",
            "title": "avalon.model"
        },
        {
            "location": "/polly/assets/#avalonrig",
            "text": "The  avalon . rig  contains the necessary implementation and interface for animators to animate.     Workfow   Add the  ROOT  group  Add animatable controllers to an  objectSet  called  controls_SET  Add cachable meshes to an  objectSet  called  out_SET   Publishing.   Create a new  Rig  INSTANCE  Add  ROOT  Add  controls_SET  Add  out_SET  Publish     Target Audience   Animation     Requirements   All DAG nodes must be parented to a single top-level transform  Must contain an  objectSet  for controls and cachable geometry     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   in_SEL   ( geometry ,   optional ) : Geometry consumed by this rig  out_SEL   ( geometry ) : Geometry produced by this rig  controls_SEL   ( transforms ) : All animatable controls  resources_SEL   ( any ,   optional ) : Nodes that reference an external file",
            "title": "avalon.rig"
        },
        {
            "location": "/polly/assets/#avalonanimation",
            "text": "Point positions and normals represented as one Alembic file.    Workflow  The animator workflow is simplified by the fact that an INSTANCE is automatically created upon loading a rig.   Load rig  Publish     Target Audience   Lighting  FX  Cloth  Hair     Requirements   None     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   None",
            "title": "avalon.animation"
        },
        {
            "location": "/polly/assets/#avalonlookdev",
            "text": "Workflow  Shaders are exported relative the meshes in an INSTANCE.   Create a new  Look  INSTANCE  Add the  transform  of each shaded mesh  Publish     Target Audience   Lighting     Requirements   None     Data   name   ( str ,   optional ) : Pretty printed name in graphical user interfaces     Sets   None      Legend      Title  Description       Target Audience  Who is the end result of this family intended for?     Requirements  What is expected of this ASSET before it passes the tests?     Data  End-user configurable options     Sets  Collection of specific items for publishing or use further down the pipeline.",
            "title": "avalon.lookdev"
        },
        {
            "location": "/polly/tutorials/",
            "text": "Talk about how to create and publish assets with Polly here.",
            "title": "Tutorials"
        },
        {
            "location": "/colorbleed/",
            "text": "Colorbleed\n\n\nThe Colorbleed pipeline configuration.",
            "title": "Home"
        },
        {
            "location": "/colorbleed/#colorbleed",
            "text": "The Colorbleed pipeline configuration.",
            "title": "Colorbleed"
        }
    ]
}